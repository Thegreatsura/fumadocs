{
  "name": "tabs",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "./tabs.unstyled": "components:tabs.unstyled.tsx"
      },
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  type ComponentProps,\n  createContext,\n  type ReactNode,\n  useContext,\n  useEffect,\n  useId,\n  useMemo,\n  useState,\n} from 'react';\nimport { cn } from '@/utils/cn';\nimport * as Unstyled from './tabs.unstyled';\n\ntype CollectionKey = string | symbol;\n\nexport interface TabsProps\n  extends Omit<\n    ComponentProps<typeof Unstyled.Tabs>,\n    'value' | 'onValueChange'\n  > {\n  /**\n   * Use simple mode instead of advanced usage as documented in https://radix-ui.com/primitives/docs/components/tabs.\n   */\n  items?: string[];\n\n  /**\n   * Shortcut for `defaultValue` when `items` is provided.\n   *\n   * @defaultValue 0\n   */\n  defaultIndex?: number;\n\n  /**\n   * Additional label in tabs list when `items` is provided.\n   */\n  label?: ReactNode;\n}\n\nconst TabsContext = createContext<{\n  items?: string[];\n  collection: CollectionKey[];\n} | null>(null);\n\nfunction useTabContext() {\n  const ctx = useContext(TabsContext);\n  if (!ctx) throw new Error('You must wrap your component in <Tabs>');\n  return ctx;\n}\n\nexport const TabsList = React.forwardRef<\n  React.ComponentRef<typeof Unstyled.TabsList>,\n  React.ComponentPropsWithoutRef<typeof Unstyled.TabsList>\n>((props, ref) => (\n  <Unstyled.TabsList\n    ref={ref}\n    {...props}\n    className={cn(\n      'flex gap-3.5 text-fd-secondary-foreground overflow-x-auto px-4 not-prose',\n      props.className,\n    )}\n  />\n));\nTabsList.displayName = 'TabsList';\n\nexport const TabsTrigger = React.forwardRef<\n  React.ComponentRef<typeof Unstyled.TabsTrigger>,\n  React.ComponentPropsWithoutRef<typeof Unstyled.TabsTrigger>\n>((props, ref) => (\n  <Unstyled.TabsTrigger\n    ref={ref}\n    {...props}\n    className={cn(\n      'inline-flex items-center gap-2 whitespace-nowrap text-fd-muted-foreground border-b border-transparent py-2 text-sm font-medium transition-colors [&_svg]:size-4 hover:text-fd-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border-fd-primary data-[state=active]:text-fd-primary',\n      props.className,\n    )}\n  />\n));\nTabsTrigger.displayName = 'TabsTrigger';\n\nexport function Tabs({\n  ref,\n  className,\n  items,\n  label,\n  defaultIndex = 0,\n  defaultValue = items ? escapeValue(items[defaultIndex]) : undefined,\n  ...props\n}: TabsProps) {\n  const [value, setValue] = useState(defaultValue);\n  const collection = useMemo<CollectionKey[]>(() => [], []);\n\n  return (\n    <Unstyled.Tabs\n      ref={ref}\n      className={cn(\n        'flex flex-col overflow-hidden rounded-xl border bg-fd-secondary my-4',\n        className,\n      )}\n      value={value}\n      onValueChange={(v: string) => {\n        if (items && !items.some((item) => escapeValue(item) === v)) return;\n        setValue(v);\n      }}\n      {...props}\n    >\n      {items && (\n        <TabsList>\n          {label && (\n            <span className=\"text-sm font-medium my-auto me-auto\">{label}</span>\n          )}\n          {items.map((item) => (\n            <TabsTrigger key={item} value={escapeValue(item)}>\n              {item}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n      )}\n      <TabsContext.Provider\n        value={useMemo(() => ({ items, collection }), [collection, items])}\n      >\n        {props.children}\n      </TabsContext.Provider>\n    </Unstyled.Tabs>\n  );\n}\n\nexport interface TabProps\n  extends Omit<ComponentProps<typeof Unstyled.TabsContent>, 'value'> {\n  /**\n   * Value of tab, detect from index if unspecified.\n   */\n  value?: string;\n}\n\nexport function Tab({ value, ...props }: TabProps) {\n  const { items } = useTabContext();\n  const resolved =\n    value ??\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- `value` is not supposed to change\n    items?.at(useCollectionIndex());\n  if (!resolved)\n    throw new Error(\n      'Failed to resolve tab `value`, please pass a `value` prop to the Tab component.',\n    );\n\n  return (\n    <TabsContent value={escapeValue(resolved)} {...props}>\n      {props.children}\n    </TabsContent>\n  );\n}\n\nexport function TabsContent({\n  value,\n  className,\n  ...props\n}: ComponentProps<typeof Unstyled.TabsContent>) {\n  return (\n    <Unstyled.TabsContent\n      value={value}\n      forceMount\n      className={cn(\n        'p-4 text-[15px] bg-fd-background rounded-xl outline-none prose-no-margin data-[state=inactive]:hidden [&>figure:only-child]:-m-4 [&>figure:only-child]:border-none',\n        className,\n      )}\n      {...props}\n    >\n      {props.children}\n    </Unstyled.TabsContent>\n  );\n}\n\n/**\n * Inspired by Headless UI.\n *\n * Return the index of children, this is made possible by registering the order of render from children using React context.\n * This is supposed by work with pre-rendering & pure client-side rendering.\n */\nfunction useCollectionIndex() {\n  const key = useId();\n  const { collection } = useTabContext();\n\n  useEffect(() => {\n    return () => {\n      const idx = collection.indexOf(key);\n      if (idx !== -1) collection.splice(idx, 1);\n    };\n  }, [key, collection]);\n\n  if (!collection.includes(key)) collection.push(key);\n  return collection.indexOf(key);\n}\n\n/**\n * only escape whitespaces in values in simple mode\n */\nfunction escapeValue(v: string): string {\n  return v.toLowerCase().replace(/\\s/, '-');\n}\n",
      "path": "components:tabs.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/merge-refs": "lib:merge-refs.ts"
      },
      "content": "'use client';\n\nimport {\n  type ComponentProps,\n  createContext,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport * as Primitive from '@radix-ui/react-tabs';\nimport { mergeRefs } from '@/utils/merge-refs';\nimport { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';\n\ntype ChangeListener = (v: string) => void;\nconst listeners = new Map<string, ChangeListener[]>();\n\nfunction addChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  list.push(listener);\n  listeners.set(id, list);\n}\n\nfunction removeChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  listeners.set(\n    id,\n    list.filter((item) => item !== listener),\n  );\n}\n\nexport interface TabsProps extends ComponentProps<typeof Primitive.Tabs> {\n  /**\n   * Identifier for Sharing value of tabs\n   */\n  groupId?: string;\n\n  /**\n   * Enable persistent\n   */\n  persist?: boolean;\n\n  /**\n   * If true, updates the URL hash based on the tab's id\n   */\n  updateAnchor?: boolean;\n}\n\nconst TabsContext = createContext<{\n  valueToIdMap: Map<string, string>;\n} | null>(null);\n\nfunction useTabContext() {\n  const ctx = useContext(TabsContext);\n  if (!ctx) throw new Error('You must wrap your component in <Tabs>');\n  return ctx;\n}\n\nexport const TabsList = Primitive.TabsList;\n\nexport const TabsTrigger = Primitive.TabsTrigger;\n\n/**\n * @internal You better not use it\n */\nexport function Tabs({\n  ref,\n  groupId,\n  persist = false,\n  updateAnchor = false,\n  defaultValue,\n  value: _value,\n  onValueChange: _onValueChange,\n  ...props\n}: TabsProps) {\n  const tabsRef = useRef<HTMLDivElement>(null);\n  const [value, setValue] =\n    _value === undefined\n      ? // eslint-disable-next-line react-hooks/rules-of-hooks -- not supposed to change controlled/uncontrolled\n        useState(defaultValue)\n      : [_value, _onValueChange ?? (() => undefined)];\n\n  const onChange = useEffectEvent((v: string) => setValue(v));\n  const valueToIdMap = useMemo(() => new Map<string, string>(), []);\n\n  useLayoutEffect(() => {\n    if (!groupId) return;\n    const previous = persist\n      ? localStorage.getItem(groupId)\n      : sessionStorage.getItem(groupId);\n\n    if (previous) onChange(previous);\n    addChangeListener(groupId, onChange);\n    return () => {\n      removeChangeListener(groupId, onChange);\n    };\n  }, [groupId, onChange, persist]);\n\n  useLayoutEffect(() => {\n    const hash = window.location.hash.slice(1);\n    if (!hash) return;\n\n    for (const [value, id] of valueToIdMap.entries()) {\n      if (id === hash) {\n        onChange(value);\n        tabsRef.current?.scrollIntoView();\n        break;\n      }\n    }\n  }, [onChange, valueToIdMap]);\n\n  return (\n    <Primitive.Tabs\n      ref={mergeRefs(ref, tabsRef)}\n      value={value}\n      onValueChange={(v: string) => {\n        if (updateAnchor) {\n          const id = valueToIdMap.get(v);\n\n          if (id) {\n            window.history.replaceState(null, '', `#${id}`);\n          }\n        }\n\n        if (groupId) {\n          listeners.get(groupId)?.forEach((item) => {\n            item(v);\n          });\n\n          if (persist) localStorage.setItem(groupId, v);\n          else sessionStorage.setItem(groupId, v);\n        } else {\n          setValue(v);\n        }\n      }}\n      {...props}\n    >\n      <TabsContext.Provider\n        value={useMemo(() => ({ valueToIdMap }), [valueToIdMap])}\n      >\n        {props.children}\n      </TabsContext.Provider>\n    </Primitive.Tabs>\n  );\n}\n\nexport function TabsContent({\n  value,\n  ...props\n}: ComponentProps<typeof Primitive.TabsContent>) {\n  const { valueToIdMap } = useTabContext();\n\n  if (props.id) {\n    valueToIdMap.set(value, props.id);\n  }\n\n  return (\n    <Primitive.TabsContent value={value} {...props}>\n      {props.children}\n    </Primitive.TabsContent>\n  );\n}\n",
      "path": "components:tabs.unstyled.tsx"
    },
    {
      "imports": {},
      "content": "import type * as React from 'react';\n\nexport function mergeRefs<T>(\n  ...refs: (React.Ref<T> | undefined)[]\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        ref.current = value;\n      }\n    });\n  };\n}\n",
      "path": "lib:merge-refs.ts"
    }
  ],
  "subComponents": [],
  "dependencies": {
    "react": "",
    "tailwind-merge": "^3.3.1",
    "@radix-ui/react-tabs": "^1.1.12",
    "fumadocs-core": ""
  },
  "devDependencies": {}
}
