{
  "name": "ai-search",
  "files": [
    {
      "imports": {
        "./search": "components:ai/search.tsx"
      },
      "content": "'use client';\nimport { type ButtonHTMLAttributes, useState } from 'react';\nimport dynamic from 'next/dynamic';\n\n// lazy load the dialog\nconst SearchAI = dynamic(() => import('./search'), { ssr: false });\n\n/**\n * The trigger component for AI search dialog.\n *\n * Use it like a normal button component.\n */\nexport function AISearchTrigger(\n  props: ButtonHTMLAttributes<HTMLButtonElement>,\n) {\n  const [open, setOpen] = useState<boolean>();\n\n  return (\n    <>\n      {open !== undefined ? (\n        <SearchAI open={open} onOpenChange={setOpen} />\n      ) : null}\n      <button {...props} onClick={() => setOpen(true)} />\n    </>\n  );\n}\n",
      "path": "components:ai/index.tsx"
    },
    {
      "imports": {
        "@/lib/cn": "lib/cn.ts",
        "../../../../packages/ui/src/components/ui/button": "components:ui/button.tsx",
        "@/lib/chat/inkeep-qa-schema": "lib/chat/inkeep-qa-schema.ts",
        "./markdown": "components:ai/markdown.tsx"
      },
      "content": "'use client';\nimport {\n  type ComponentProps,\n  createContext,\n  type SyntheticEvent,\n  use,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Loader2, RefreshCw, Send, X } from 'lucide-react';\nimport { cn } from '@/lib/cn';\nimport { buttonVariants } from '../../../../packages/ui/src/components/ui/button';\nimport Link from 'fumadocs-core/link';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  type DialogProps,\n  DialogTitle,\n} from '@radix-ui/react-dialog';\nimport { type UIMessage, useChat, type UseChatHelpers } from '@ai-sdk/react';\nimport type { ProvideLinksToolSchema } from '@/lib/chat/inkeep-qa-schema';\nimport type { z } from 'zod';\nimport { DefaultChatTransport } from 'ai';\nimport { Markdown } from './markdown';\n\nconst ChatContext = createContext<UseChatHelpers<UIMessage> | null>(null);\nfunction useChatContext() {\n  return use(ChatContext)!;\n}\n\nfunction SearchAIActions(props: ComponentProps<'div'>) {\n  const { messages, status, setMessages, regenerate } = useChatContext();\n  const isLoading = status === 'streaming';\n\n  if (messages.length === 0) return null;\n\n  return (\n    <div {...props}>\n      {!isLoading && messages.at(-1)?.role === 'assistant' && (\n        <button\n          type=\"button\"\n          className={cn(\n            buttonVariants({\n              color: 'secondary',\n              size: 'sm',\n              className: 'rounded-full gap-1.5',\n            }),\n          )}\n          onClick={() => regenerate()}\n        >\n          <RefreshCw className=\"size-4\" />\n          Retry\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className={cn(\n          buttonVariants({\n            color: 'secondary',\n            size: 'sm',\n            className: 'rounded-full',\n          }),\n        )}\n        onClick={() => setMessages([])}\n      >\n        Clear Chat\n      </button>\n    </div>\n  );\n}\n\nfunction SearchAIInput(props: ComponentProps<'form'>) {\n  const { status, sendMessage, stop } = useChatContext();\n  const [input, setInput] = useState('');\n  const isLoading = status === 'streaming' || status === 'submitted';\n  const onStart = (e?: SyntheticEvent) => {\n    e?.preventDefault();\n    void sendMessage({ text: input });\n    setInput('');\n  };\n\n  useEffect(() => {\n    if (isLoading) document.getElementById('nd-ai-input')?.focus();\n  }, [isLoading]);\n\n  return (\n    <form\n      {...props}\n      className={cn('flex items-start pe-2', props.className)}\n      onSubmit={onStart}\n    >\n      <Input\n        value={input}\n        placeholder={isLoading ? 'AI is answering...' : 'Ask AI something'}\n        className=\"max-h-60 min-h-10 p-3\"\n        disabled={status === 'streaming' || status === 'submitted'}\n        onChange={(e) => {\n          setInput(e.target.value);\n        }}\n        onKeyDown={(event) => {\n          if (!event.shiftKey && event.key === 'Enter') {\n            onStart(event);\n          }\n        }}\n      />\n      {isLoading ? (\n        <button\n          type=\"button\"\n          className={cn(\n            buttonVariants({\n              color: 'secondary',\n              className: 'rounded-full mt-2 gap-2',\n            }),\n          )}\n          onClick={stop}\n        >\n          <Loader2 className=\"size-4 animate-spin text-fd-muted-foreground\" />\n          Abort Answer\n        </button>\n      ) : (\n        <button\n          type=\"submit\"\n          className={cn(\n            buttonVariants({\n              color: 'ghost',\n              className: 'transition-full rounded-full mt-2',\n              size: 'icon-sm',\n            }),\n          )}\n          disabled={input.length === 0}\n        >\n          <Send className=\"size-4\" />\n        </button>\n      )}\n    </form>\n  );\n}\n\nfunction List(props: Omit<ComponentProps<'div'>, 'dir'>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    function callback() {\n      const container = containerRef.current;\n      if (!container) return;\n\n      container.scrollTo({\n        top: container.scrollHeight,\n        behavior: 'instant',\n      });\n    }\n\n    const observer = new ResizeObserver(callback);\n    callback();\n\n    const element = containerRef.current?.firstElementChild;\n\n    if (element) {\n      observer.observe(element);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      {...props}\n      className={cn(\n        'fd-scroll-container overflow-y-auto max-h-[calc(100dvh-240px)] min-w-0 flex flex-col',\n        props.className,\n      )}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nfunction Input(props: ComponentProps<'textarea'>) {\n  const ref = useRef<HTMLDivElement>(null);\n  const shared = cn('col-start-1 row-start-1', props.className);\n\n  return (\n    <div className=\"grid flex-1\">\n      <textarea\n        id=\"nd-ai-input\"\n        {...props}\n        className={cn(\n          'resize-none bg-transparent placeholder:text-fd-muted-foreground focus-visible:outline-none',\n          shared,\n        )}\n      />\n      <div ref={ref} className={cn(shared, 'break-all invisible')}>\n        {`${props.value?.toString() ?? ''}\\n`}\n      </div>\n    </div>\n  );\n}\n\nconst roleName: Record<string, string> = {\n  user: 'you',\n  assistant: 'fumadocs',\n};\n\nfunction Message({\n  message,\n  ...props\n}: { message: UIMessage } & ComponentProps<'div'>) {\n  let markdown = '';\n  let links: z.infer<typeof ProvideLinksToolSchema>['links'] = [];\n\n  for (const part of message.parts ?? []) {\n    if (part.type === 'text') {\n      markdown += part.text;\n      continue;\n    }\n\n    if (part.type === 'tool-provideLinks' && part.input) {\n      links = (part.input as z.infer<typeof ProvideLinksToolSchema>).links;\n    }\n  }\n\n  return (\n    <div {...props}>\n      <p\n        className={cn(\n          'mb-1 text-sm font-medium text-fd-muted-foreground',\n          message.role === 'assistant' && 'text-fd-primary',\n        )}\n      >\n        {roleName[message.role] ?? 'unknown'}\n      </p>\n      <div className=\"prose text-sm\">\n        <Markdown text={markdown} />\n      </div>\n      {links && links.length > 0 ? (\n        <div className=\"mt-2 flex flex-row flex-wrap items-center gap-1\">\n          {links.map((item, i) => (\n            <Link\n              key={i}\n              href={item.url}\n              className=\"block text-xs rounded-lg border p-3 hover:bg-fd-accent hover:text-fd-accent-foreground\"\n            >\n              <p className=\"font-medium\">{item.title}</p>\n              <p className=\"text-fd-muted-foreground\">Reference {item.label}</p>\n            </Link>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default function AISearch(props: DialogProps) {\n  const chat = useChat({\n    id: 'search',\n    transport: new DefaultChatTransport({\n      api: '/api/chat',\n    }),\n  });\n\n  const messages = chat.messages.filter((msg) => msg.role !== 'system');\n\n  return (\n    <Dialog {...props}>\n      {props.children}\n      <DialogPortal>\n        <DialogOverlay className=\"fixed inset-0 z-50 backdrop-blur-xs data-[state=closed]:animate-fd-fade-out data-[state=open]:animate-fd-fade-in\" />\n        <DialogContent\n          onOpenAutoFocus={(e) => {\n            document.getElementById('nd-ai-input')?.focus();\n            e.preventDefault();\n          }}\n          aria-describedby={undefined}\n          className=\"fixed flex flex-col w-[calc(100%-1rem)] bg-fd-popover/80 backdrop-blur-xl p-1 rounded-2xl shadow-2xl border max-md:top-12 md:bottom-12 left-1/2 z-50 max-w-screen-sm -translate-x-1/2 focus-visible:outline-none data-[state=open]:animate-fd-dialog-in data-[state=closed]:animate-fd-dialog-out\"\n        >\n          <ChatContext value={chat}>\n            <div className=\"px-3 py-2\">\n              <DialogTitle className=\"text-sm font-medium\">\n                Inkeep AI\n              </DialogTitle>\n              <DialogDescription className=\"text-xs text-fd-muted-foreground\">\n                AI can be inaccurate, please verify the information.\n              </DialogDescription>\n            </div>\n            <DialogClose\n              aria-label=\"Close\"\n              tabIndex={-1}\n              className={cn(\n                buttonVariants({\n                  size: 'icon-sm',\n                  color: 'ghost',\n                  className: 'absolute top-1 end-1 text-fd-muted-foreground',\n                }),\n              )}\n            >\n              <X />\n            </DialogClose>\n\n            {messages.length > 0 && (\n              <List\n                style={{\n                  maskImage:\n                    'linear-gradient(to bottom, transparent, black 20px, black calc(100% - 20px), transparent)',\n                }}\n              >\n                <div className=\"flex flex-col gap-4 p-3\">\n                  {messages.map((item) => (\n                    <Message key={item.id} message={item} />\n                  ))}\n                </div>\n              </List>\n            )}\n            <div className=\"rounded-xl overflow-hidden border border-fd-foreground/20 text-fd-popover-foreground\">\n              <SearchAIInput />\n              <SearchAIActions className=\"flex flex-row items-center gap-1.5 p-1 empty:hidden\" />\n            </div>\n          </ChatContext>\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  );\n}\n",
      "path": "components:ai/search.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib/cn.ts"
    },
    {
      "imports": {},
      "content": "import { z } from 'zod';\n\nconst InkeepRecordTypes = z.enum([\n  'documentation',\n  'site',\n  'discourse_post',\n  'github_issue',\n  'github_discussion',\n  'stackoverflow_question',\n  'discord_forum_post',\n  'discord_message',\n  'custom_question_answer',\n]);\n\nconst LinkType = z.union([\n  InkeepRecordTypes,\n  z.string(), // catch all\n]);\n\nconst LinkSchema = z.looseObject({\n  label: z.string().nullish(), // the value of the footnote, e.g. `1`\n  url: z.string(),\n  title: z.string().nullish(),\n  type: LinkType.nullish(),\n  breadcrumbs: z.array(z.string()).nullish(),\n});\n\nconst LinksSchema = z.array(LinkSchema).nullish();\n\nexport const ProvideLinksToolSchema = z.object({\n  links: LinksSchema,\n});\n\nconst KnownAnswerConfidence = z.enum([\n  'very_confident',\n  'somewhat_confident',\n  'not_confident',\n  'no_sources',\n  'other',\n]);\n\nconst AnswerConfidence = z.union([KnownAnswerConfidence, z.string()]); // evolvable\n\nconst AIAnnotationsToolSchema = z.looseObject({\n  answerConfidence: AnswerConfidence,\n});\n\nexport const ProvideAIAnnotationsToolSchema = z.object({\n  aiAnnotations: AIAnnotationsToolSchema,\n});\n",
      "path": "lib/chat/inkeep-qa-schema.ts"
    },
    {
      "imports": {},
      "content": "import { remark } from 'remark';\nimport remarkGfm from 'remark-gfm';\nimport remarkRehype from 'remark-rehype';\nimport { toJsxRuntime } from 'hast-util-to-jsx-runtime';\nimport {\n  Children,\n  type ComponentProps,\n  type ReactElement,\n  type ReactNode,\n  Suspense,\n  use,\n  useDeferredValue,\n} from 'react';\nimport { Fragment, jsx, jsxs } from 'react/jsx-runtime';\nimport { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\n\nexport interface Processor {\n  process: (content: string) => Promise<ReactNode>;\n}\n\nfunction createProcessor(): Processor {\n  const processor = remark().use(remarkGfm).use(remarkRehype);\n\n  return {\n    async process(content) {\n      const nodes = processor.parse({ value: content });\n      const hast = await processor.run(nodes);\n\n      return toJsxRuntime(hast, {\n        development: false,\n        jsx,\n        jsxs,\n        Fragment,\n        components: {\n          ...defaultMdxComponents,\n          pre: Pre,\n          img: undefined, // use JSX\n        },\n      });\n    },\n  };\n}\n\nfunction Pre(props: ComponentProps<'pre'>) {\n  const code = Children.only(props.children) as ReactElement;\n  const codeProps = code.props as ComponentProps<'code'>;\n\n  let lang =\n    codeProps.className\n      ?.split(' ')\n      .find((v) => v.startsWith('language-'))\n      ?.slice('language-'.length) ?? 'text';\n\n  if (lang === 'mdx') lang = 'md';\n\n  return (\n    <DynamicCodeBlock lang={lang} code={(codeProps.children ?? '') as string} />\n  );\n}\n\nconst processor = createProcessor();\n\nexport function Markdown({ text }: { text: string }) {\n  const deferredText = useDeferredValue(text);\n\n  return (\n    <Suspense fallback={text}>\n      <Renderer text={deferredText} />\n    </Suspense>\n  );\n}\n\nconst cache = new Map<string, Promise<ReactNode>>();\n\nfunction Renderer({ text }: { text: string }) {\n  const result = cache.get(text) ?? processor.process(text);\n  cache.set(text, result);\n\n  return use(result);\n}\n",
      "path": "components:ai/markdown.tsx"
    },
    {
      "imports": {
        "@/lib/chat/inkeep-qa-schema": "lib/chat/inkeep-qa-schema.ts"
      },
      "content": "import { ProvideLinksToolSchema } from '@/lib/chat/inkeep-qa-schema';\nimport { createOpenAICompatible } from '@ai-sdk/openai-compatible';\nimport { convertToModelMessages, streamText } from 'ai';\n\nexport const runtime = 'edge';\n\nconst openai = createOpenAICompatible({\n  name: 'inkeep',\n  apiKey: process.env.INKEEP_API_KEY,\n  baseURL: 'https://api.inkeep.com/v1',\n});\n\nexport async function POST(req: Request) {\n  const reqJson = await req.json();\n\n  const result = streamText({\n    model: openai('inkeep-qa-sonnet-4'),\n    tools: {\n      provideLinks: {\n        inputSchema: ProvideLinksToolSchema,\n      },\n    },\n    messages: convertToModelMessages(reqJson.messages, {\n      ignoreIncompleteToolCalls: true,\n    }),\n    toolChoice: 'auto',\n  });\n\n  return result.toUIMessageStreamResponse();\n}\n",
      "path": "app/api/chat/route.ts"
    }
  ],
  "subComponents": ["ai-search", "button"],
  "dependencies": {
    "react": "",
    "next": "",
    "lucide-react": "^0.539.0",
    "fumadocs-core": "",
    "@radix-ui/react-dialog": "^1.1.14",
    "@ai-sdk/react": "^2.0.10",
    "zod": "^4.0.17",
    "ai": "^5.0.10",
    "@ai-sdk/openai-compatible": "^1.0.5",
    "tailwind-merge": "^3.3.1",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.1",
    "remark-rehype": "^11.1.2",
    "hast-util-to-jsx-runtime": "^2.3.6",
    "fumadocs-ui": ""
  },
  "devDependencies": {}
}
