{
  "name": "codeblock",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx",
        "@/components/tabs.unstyled": "components:tabs.unstyled.tsx",
        "@/utils/merge-refs": "lib:merge-refs.ts"
      },
      "content": "'use client';\nimport { Check, Copy } from 'lucide-react';\nimport {\n  type ComponentProps,\n  createContext,\n  type HTMLAttributes,\n  type ReactNode,\n  type RefObject,\n  useContext,\n  useMemo,\n  useRef,\n} from 'react';\nimport { cn } from '@/utils/cn';\nimport { useCopyButton } from 'fumadocs-ui/utils/use-copy-button';\nimport { buttonVariants } from '@/components/ui/button';\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@/components/tabs.unstyled';\nimport { mergeRefs } from '@/utils/merge-refs';\n\nexport interface CodeBlockProps extends ComponentProps<'figure'> {\n  /**\n   * Icon of code block\n   *\n   * When passed as a string, it assumes the value is the HTML of icon\n   */\n  icon?: ReactNode;\n\n  /**\n   * Allow to copy code with copy button\n   *\n   * @defaultValue true\n   */\n  allowCopy?: boolean;\n\n  /**\n   * Keep original background color generated by Shiki or Rehype Code\n   *\n   * @defaultValue false\n   */\n  keepBackground?: boolean;\n\n  viewportProps?: HTMLAttributes<HTMLElement>;\n\n  /**\n   * show line numbers\n   */\n  'data-line-numbers'?: boolean;\n\n  /**\n   * @defaultValue 1\n   */\n  'data-line-numbers-start'?: number;\n\n  Actions?: (props: { className?: string; children?: ReactNode }) => ReactNode;\n}\n\nconst TabsContext = createContext<{\n  containerRef: RefObject<HTMLDivElement | null>;\n  nested: boolean;\n} | null>(null);\n\nexport function Pre(props: ComponentProps<'pre'>) {\n  return (\n    <pre\n      {...props}\n      className={cn('min-w-full w-max *:flex *:flex-col', props.className)}\n    >\n      {props.children}\n    </pre>\n  );\n}\n\nexport function CodeBlock({\n  ref,\n  title,\n  allowCopy,\n  keepBackground = false,\n  icon,\n  viewportProps = {},\n  children,\n  Actions = (props) => (\n    <div {...props} className={cn('empty:hidden', props.className)} />\n  ),\n  ...props\n}: CodeBlockProps) {\n  const isTab = useContext(TabsContext) !== null;\n  const areaRef = useRef<HTMLDivElement>(null);\n  allowCopy ??= !isTab;\n  const bg = cn(\n    'bg-fd-secondary',\n    keepBackground && 'bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)',\n  );\n\n  return (\n    <figure\n      ref={ref}\n      dir=\"ltr\"\n      {...props}\n      className={cn(\n        isTab ? [bg, 'rounded-lg shadow-sm'] : 'my-4 rounded-xl bg-fd-card p-1',\n        'shiki relative border outline-none not-prose overflow-hidden text-sm',\n        props.className,\n      )}\n    >\n      {title ? (\n        <div\n          className={cn(\n            'flex text-fd-muted-foreground items-center gap-2 ps-3 h-9.5',\n            isTab && 'border-b',\n          )}\n        >\n          {typeof icon === 'string' ? (\n            <div\n              className=\"[&_svg]:size-3.5\"\n              dangerouslySetInnerHTML={{\n                __html: icon,\n              }}\n            />\n          ) : (\n            icon\n          )}\n          <figcaption className=\"flex-1 truncate\">{title}</figcaption>\n          {Actions({\n            children: allowCopy && <CopyButton containerRef={areaRef} />,\n          })}\n        </div>\n      ) : (\n        Actions({\n          className:\n            'absolute top-1 right-1 z-2 bg-fd-card rounded-bl-lg border-l border-b text-fd-muted-foreground',\n          children: allowCopy && <CopyButton containerRef={areaRef} />,\n        })\n      )}\n      <div\n        ref={areaRef}\n        {...viewportProps}\n        className={cn(\n          !isTab && [bg, 'rounded-lg border'],\n          'text-[13px] py-3.5 overflow-auto max-h-[600px] fd-scroll-container',\n          viewportProps.className,\n        )}\n        style={\n          {\n            // space for toolbar\n            '--padding-right': !title ? 'calc(var(--spacing) * 8)' : undefined,\n            counterSet: props['data-line-numbers']\n              ? `line ${Number(props['data-line-numbers-start'] ?? 1) - 1}`\n              : undefined,\n            ...viewportProps.style,\n          } as object\n        }\n      >\n        {children}\n      </div>\n    </figure>\n  );\n}\n\nfunction CopyButton({\n  className,\n  containerRef,\n  ...props\n}: ComponentProps<'button'> & {\n  containerRef: RefObject<HTMLElement | null>;\n}) {\n  const [checked, onClick] = useCopyButton(() => {\n    const pre = containerRef.current?.getElementsByTagName('pre').item(0);\n    if (!pre) return;\n\n    const clone = pre.cloneNode(true) as HTMLElement;\n    clone.querySelectorAll('.nd-copy-ignore').forEach((node) => {\n      node.replaceWith('\\n');\n    });\n\n    void navigator.clipboard.writeText(clone.textContent ?? '');\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={cn(\n        buttonVariants({\n          color: 'ghost',\n          className: '[&_svg]:size-3.5',\n        }),\n        className,\n      )}\n      aria-label={checked ? 'Copied Text' : 'Copy Text'}\n      onClick={onClick}\n      {...props}\n    >\n      {checked ? <Check /> : <Copy />}\n    </button>\n  );\n}\n\nexport function CodeBlockTabs({ ref, ...props }: ComponentProps<typeof Tabs>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const nested = useContext(TabsContext) !== null;\n\n  return (\n    <Tabs\n      ref={mergeRefs(containerRef, ref)}\n      {...props}\n      className={cn(\n        'bg-fd-card p-1 rounded-xl border overflow-hidden',\n        !nested && 'my-4',\n        props.className,\n      )}\n    >\n      <TabsContext.Provider\n        value={useMemo(\n          () => ({\n            containerRef,\n            nested,\n          }),\n          [nested],\n        )}\n      >\n        {props.children}\n      </TabsContext.Provider>\n    </Tabs>\n  );\n}\n\nexport function CodeBlockTabsList(props: ComponentProps<typeof TabsList>) {\n  const { containerRef, nested } = useContext(TabsContext)!;\n\n  return (\n    <TabsList\n      {...props}\n      className={cn(\n        'flex flex-row overflow-x-auto px-1 -mx-1 text-fd-muted-foreground',\n        props.className,\n      )}\n    >\n      {props.children}\n      {!nested && (\n        <CopyButton\n          className=\"sticky ms-auto right-0 bg-fd-card backdrop-blur-sm\"\n          containerRef={containerRef}\n        />\n      )}\n    </TabsList>\n  );\n}\n\nexport function CodeBlockTabsTrigger({\n  children,\n  ...props\n}: ComponentProps<typeof TabsTrigger>) {\n  return (\n    <TabsTrigger\n      {...props}\n      className={cn(\n        'relative group inline-flex text-sm font-medium text-nowrap items-center gap-2 px-2 first:ms-1 py-1.5 hover:text-fd-accent-foreground data-[state=active]:text-fd-primary [&_svg]:size-3.5',\n        props.className,\n      )}\n    >\n      <div className=\"absolute inset-x-2 bottom-0 h-px group-data-[state=active]:bg-fd-primary\" />\n      {children}\n    </TabsTrigger>\n  );\n}\n\n// TODO: currently Vite RSC plugin has problem with adding `asChild` here, maybe revisit this in future\nexport const CodeBlockTab = TabsContent;\n",
      "path": "components:codeblock.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/merge-refs": "lib:merge-refs.ts"
      },
      "content": "'use client';\n\nimport {\n  type ComponentProps,\n  createContext,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport * as Primitive from '@radix-ui/react-tabs';\nimport { mergeRefs } from '@/utils/merge-refs';\nimport { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';\n\ntype ChangeListener = (v: string) => void;\nconst listeners = new Map<string, ChangeListener[]>();\n\nfunction addChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  list.push(listener);\n  listeners.set(id, list);\n}\n\nfunction removeChangeListener(id: string, listener: ChangeListener): void {\n  const list = listeners.get(id) ?? [];\n  listeners.set(\n    id,\n    list.filter((item) => item !== listener),\n  );\n}\n\nexport interface TabsProps extends ComponentProps<typeof Primitive.Tabs> {\n  /**\n   * Identifier for Sharing value of tabs\n   */\n  groupId?: string;\n\n  /**\n   * Enable persistent\n   */\n  persist?: boolean;\n\n  /**\n   * If true, updates the URL hash based on the tab's id\n   */\n  updateAnchor?: boolean;\n}\n\nconst TabsContext = createContext<{\n  valueToIdMap: Map<string, string>;\n} | null>(null);\n\nfunction useTabContext() {\n  const ctx = useContext(TabsContext);\n  if (!ctx) throw new Error('You must wrap your component in <Tabs>');\n  return ctx;\n}\n\nexport const TabsList = Primitive.TabsList;\n\nexport const TabsTrigger = Primitive.TabsTrigger;\n\n/**\n * @internal You better not use it\n */\nexport function Tabs({\n  ref,\n  groupId,\n  persist = false,\n  updateAnchor = false,\n  defaultValue,\n  value: _value,\n  onValueChange: _onValueChange,\n  ...props\n}: TabsProps) {\n  const tabsRef = useRef<HTMLDivElement>(null);\n  const [value, setValue] =\n    _value === undefined\n      ? // eslint-disable-next-line react-hooks/rules-of-hooks -- not supposed to change controlled/uncontrolled\n        useState(defaultValue)\n      : [_value, _onValueChange ?? (() => undefined)];\n\n  const onChange = useEffectEvent((v: string) => setValue(v));\n  const valueToIdMap = useMemo(() => new Map<string, string>(), []);\n\n  useLayoutEffect(() => {\n    if (!groupId) return;\n    const previous = persist\n      ? localStorage.getItem(groupId)\n      : sessionStorage.getItem(groupId);\n\n    if (previous) onChange(previous);\n    addChangeListener(groupId, onChange);\n    return () => {\n      removeChangeListener(groupId, onChange);\n    };\n  }, [groupId, onChange, persist]);\n\n  useLayoutEffect(() => {\n    const hash = window.location.hash.slice(1);\n    if (!hash) return;\n\n    for (const [value, id] of valueToIdMap.entries()) {\n      if (id === hash) {\n        onChange(value);\n        tabsRef.current?.scrollIntoView();\n        break;\n      }\n    }\n  }, [onChange, valueToIdMap]);\n\n  return (\n    <Primitive.Tabs\n      ref={mergeRefs(ref, tabsRef)}\n      value={value}\n      onValueChange={(v: string) => {\n        if (updateAnchor) {\n          const id = valueToIdMap.get(v);\n\n          if (id) {\n            window.history.replaceState(null, '', `#${id}`);\n          }\n        }\n\n        if (groupId) {\n          listeners.get(groupId)?.forEach((item) => {\n            item(v);\n          });\n\n          if (persist) localStorage.setItem(groupId, v);\n          else sessionStorage.setItem(groupId, v);\n        } else {\n          setValue(v);\n        }\n      }}\n      {...props}\n    >\n      <TabsContext.Provider\n        value={useMemo(() => ({ valueToIdMap }), [valueToIdMap])}\n      >\n        {props.children}\n      </TabsContext.Provider>\n    </Primitive.Tabs>\n  );\n}\n\nexport function TabsContent({\n  value,\n  ...props\n}: ComponentProps<typeof Primitive.TabsContent>) {\n  const { valueToIdMap } = useTabContext();\n\n  if (props.id) {\n    valueToIdMap.set(value, props.id);\n  }\n\n  return (\n    <Primitive.TabsContent value={value} {...props}>\n      {props.children}\n    </Primitive.TabsContent>\n  );\n}\n",
      "path": "components:tabs.unstyled.tsx"
    },
    {
      "imports": {},
      "content": "import type * as React from 'react';\n\nexport function mergeRefs<T>(\n  ...refs: (React.Ref<T> | undefined)[]\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        ref.current = value;\n      }\n    });\n  };\n}\n",
      "path": "lib:merge-refs.ts"
    }
  ],
  "subComponents": ["button"],
  "dependencies": {
    "lucide-react": "",
    "react": "",
    "fumadocs-ui": "",
    "tailwind-merge": "^3.3.1",
    "@radix-ui/react-tabs": "^1.1.12",
    "fumadocs-core": ""
  },
  "devDependencies": {}
}
