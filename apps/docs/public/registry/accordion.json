{
  "name": "accordion",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx",
        "@/utils/merge-refs": "lib:merge-refs.ts"
      },
      "content": "'use client';\n\nimport type {\n  AccordionMultipleProps,\n  AccordionSingleProps,\n} from '@radix-ui/react-accordion';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { Check, ChevronRight, Link as LinkIcon } from 'lucide-react';\nimport {\n  type ComponentPropsWithoutRef,\n  forwardRef,\n  type ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { cn } from '@/utils/cn';\nimport { useCopyButton } from 'fumadocs-ui/utils/use-copy-button';\nimport { buttonVariants } from '@/components/ui/button';\nimport { mergeRefs } from '@/utils/merge-refs';\n\nexport const Accordions = forwardRef<\n  HTMLDivElement,\n  | Omit<AccordionSingleProps, 'value' | 'onValueChange'>\n  | Omit<AccordionMultipleProps, 'value' | 'onValueChange'>\n>(({ type = 'single', className, defaultValue, ...props }, ref) => {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const composedRef = mergeRefs(ref, rootRef);\n  const [value, setValue] = useState<string | string[]>(() =>\n    type === 'single' ? (defaultValue ?? '') : (defaultValue ?? []),\n  );\n\n  useEffect(() => {\n    const id = window.location.hash.substring(1);\n    const element = rootRef.current;\n    if (!element || id.length === 0) return;\n\n    const selected = document.getElementById(id);\n    if (!selected || !element.contains(selected)) return;\n    const value = selected.getAttribute('data-accordion-value');\n\n    if (value)\n      setValue((prev) => (typeof prev === 'string' ? value : [value, ...prev]));\n  }, []);\n\n  return (\n    // @ts-expect-error -- Multiple types\n    <AccordionPrimitive.Root\n      type={type}\n      ref={composedRef}\n      value={value}\n      onValueChange={setValue}\n      collapsible={type === 'single' ? true : undefined}\n      className={cn(\n        'divide-y divide-fd-border overflow-hidden rounded-lg border bg-fd-card',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\n\nAccordions.displayName = 'Accordions';\n\nexport const Accordion = forwardRef<\n  HTMLDivElement,\n  Omit<\n    ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>,\n    'value' | 'title'\n  > & {\n    title: string | ReactNode;\n    value?: string;\n  }\n>(\n  (\n    { title, className, id, value = String(title), children, ...props },\n    ref,\n  ) => {\n    return (\n      <AccordionPrimitive.Item\n        ref={ref}\n        value={value}\n        className={cn('scroll-m-24', className)}\n        {...props}\n      >\n        <AccordionPrimitive.Header\n          id={id}\n          data-accordion-value={value}\n          className=\"not-prose flex flex-row items-center text-fd-card-foreground font-medium has-focus-visible:bg-fd-accent\"\n        >\n          <AccordionPrimitive.Trigger className=\"group flex flex-1 items-center gap-2 px-3 py-2.5 text-start focus-visible:outline-none\">\n            <ChevronRight className=\"size-4 shrink-0 text-fd-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-90\" />\n            {title}\n          </AccordionPrimitive.Trigger>\n          {id ? <CopyButton id={id} /> : null}\n        </AccordionPrimitive.Header>\n        <AccordionPrimitive.Content className=\"overflow-hidden data-[state=closed]:animate-fd-accordion-up data-[state=open]:animate-fd-accordion-down\">\n          <div className=\"px-4 pb-2 text-[15px] prose-no-margin\">\n            {children}\n          </div>\n        </AccordionPrimitive.Content>\n      </AccordionPrimitive.Item>\n    );\n  },\n);\n\nfunction CopyButton({ id }: { id: string }) {\n  const [checked, onClick] = useCopyButton(() => {\n    const url = new URL(window.location.href);\n    url.hash = id;\n\n    return navigator.clipboard.writeText(url.toString());\n  });\n\n  return (\n    <button\n      type=\"button\"\n      aria-label=\"Copy Link\"\n      className={cn(\n        buttonVariants({\n          color: 'ghost',\n          className: 'text-fd-muted-foreground me-2',\n        }),\n      )}\n      onClick={onClick}\n    >\n      {checked ? (\n        <Check className=\"size-3.5\" />\n      ) : (\n        <LinkIcon className=\"size-3.5\" />\n      )}\n    </button>\n  );\n}\n\nAccordion.displayName = 'Accordion';\n",
      "path": "components:accordion.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {},
      "content": "import type * as React from 'react';\n\nexport function mergeRefs<T>(\n  ...refs: (React.Ref<T> | undefined)[]\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        ref.current = value;\n      }\n    });\n  };\n}\n",
      "path": "lib:merge-refs.ts"
    }
  ],
  "subComponents": ["button"],
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.11",
    "lucide-react": "",
    "react": "",
    "fumadocs-ui": "",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {}
}
