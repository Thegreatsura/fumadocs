{
  "name": "layouts/page",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx",
        "@/layouts/docs/page": "components:layouts/docs/page.tsx"
      },
      "content": "import { type ComponentProps, forwardRef, type ReactNode } from 'react';\nimport { cn } from '@/utils/cn';\nimport { buttonVariants } from '@/components/ui/button';\nimport { Edit } from '@/icons';\nimport { I18nLabel } from 'fumadocs-ui/contexts/i18n';\nimport {\n  type BreadcrumbProps,\n  type FooterProps,\n  PageArticle,\n  PageBreadcrumb,\n  PageFooter,\n  PageLastUpdate,\n  PageRoot,\n  PageTOC,\n  PageTOCItems,\n  PageTOCPopover,\n  PageTOCPopoverContent,\n  PageTOCPopoverItems,\n  PageTOCPopoverTrigger,\n  PageTOCTitle,\n} from '@/layouts/docs/page';\nimport type { AnchorProviderProps } from 'fumadocs-core/toc';\nimport type { TOCItemType } from 'fumadocs-core/server';\n\ninterface EditOnGitHubOptions\n  extends Omit<ComponentProps<'a'>, 'href' | 'children'> {\n  owner: string;\n  repo: string;\n\n  /**\n   * SHA or ref (branch or tag) name.\n   *\n   * @defaultValue main\n   */\n  sha?: string;\n\n  /**\n   * File path in the repo\n   */\n  path: string;\n}\n\ninterface BreadcrumbOptions extends BreadcrumbProps {\n  enabled: boolean;\n  component: ReactNode;\n\n  /**\n   * Show the full path to the current page\n   *\n   * @defaultValue false\n   * @deprecated use `includePage` instead\n   */\n  full?: boolean;\n}\n\ninterface FooterOptions extends FooterProps {\n  enabled: boolean;\n  component: ReactNode;\n}\n\nexport interface DocsPageProps {\n  toc?: TOCItemType[];\n  tableOfContent?: Partial<TableOfContentOptions>;\n  tableOfContentPopover?: Partial<TableOfContentPopoverOptions>;\n\n  /**\n   * Extend the page to fill all available space\n   *\n   * @defaultValue false\n   */\n  full?: boolean;\n\n  /**\n   * Replace or disable breadcrumb\n   */\n  breadcrumb?: Partial<BreadcrumbOptions>;\n\n  /**\n   * Footer navigation, you can disable it by passing `false`\n   */\n  footer?: Partial<FooterOptions>;\n\n  editOnGithub?: EditOnGitHubOptions;\n  lastUpdate?: Date | string | number;\n\n  container?: ComponentProps<'div'>;\n  article?: ComponentProps<'article'>;\n  children?: ReactNode;\n}\n\ntype TableOfContentOptions = Pick<AnchorProviderProps, 'single'> & {\n  /**\n   * Custom content in TOC container, before the main TOC\n   */\n  header?: ReactNode;\n\n  /**\n   * Custom content in TOC container, after the main TOC\n   */\n  footer?: ReactNode;\n\n  enabled: boolean;\n  component: ReactNode;\n\n  /**\n   * @defaultValue 'normal'\n   */\n  style?: 'normal' | 'clerk';\n};\n\ntype TableOfContentPopoverOptions = Omit<TableOfContentOptions, 'single'>;\n\nexport function DocsPage({\n  editOnGithub,\n  breadcrumb: {\n    enabled: breadcrumbEnabled = true,\n    component: breadcrumb,\n    ...breadcrumbProps\n  } = {},\n  footer = {},\n  lastUpdate,\n  container,\n  full = false,\n  tableOfContentPopover: {\n    enabled: tocPopoverEnabled,\n    component: tocPopover,\n    ...tocPopoverOptions\n  } = {},\n  tableOfContent: {\n    enabled: tocEnabled,\n    component: tocReplace,\n    ...tocOptions\n  } = {},\n  toc = [],\n  article,\n  children,\n}: DocsPageProps) {\n  const isTocRequired =\n    toc.length > 0 ||\n    tocOptions.footer !== undefined ||\n    tocOptions.header !== undefined;\n\n  // disable TOC on full mode, you can still enable it with `enabled` option.\n  tocEnabled ??= !full && isTocRequired;\n\n  tocPopoverEnabled ??=\n    toc.length > 0 ||\n    tocPopoverOptions.header !== undefined ||\n    tocPopoverOptions.footer !== undefined;\n\n  return (\n    <PageRoot\n      toc={{\n        toc,\n        single: tocOptions.single,\n      }}\n      {...container}\n    >\n      {tocPopoverEnabled &&\n        (tocPopover ?? (\n          <PageTOCPopover>\n            <PageTOCPopoverTrigger />\n            <PageTOCPopoverContent>\n              {tocPopoverOptions.header}\n              <PageTOCPopoverItems variant={tocPopoverOptions.style} />\n              {tocPopoverOptions.footer}\n            </PageTOCPopoverContent>\n          </PageTOCPopover>\n        ))}\n      <PageArticle {...article}>\n        {breadcrumbEnabled &&\n          (breadcrumb ?? <PageBreadcrumb {...breadcrumbProps} />)}\n        {children}\n        <div role=\"none\" className=\"flex-1\" />\n        <div className=\"flex flex-row flex-wrap items-center justify-between gap-4 empty:hidden\">\n          {editOnGithub && (\n            <EditOnGitHub\n              href={`https://github.com/${editOnGithub.owner}/${editOnGithub.repo}/blob/${editOnGithub.sha}/${editOnGithub.path.startsWith('/') ? editOnGithub.path.slice(1) : editOnGithub.path}`}\n            />\n          )}\n          {lastUpdate && <PageLastUpdate date={new Date(lastUpdate)} />}\n        </div>\n        {footer.enabled !== false &&\n          (footer.component ?? <PageFooter items={footer.items} />)}\n      </PageArticle>\n      {tocEnabled &&\n        (tocReplace ?? (\n          <PageTOC>\n            {tocOptions.header}\n            <PageTOCTitle />\n            <PageTOCItems variant={tocOptions.style} />\n            {tocOptions.footer}\n          </PageTOC>\n        ))}\n    </PageRoot>\n  );\n}\n\nexport function EditOnGitHub(props: ComponentProps<'a'>) {\n  return (\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n      {...props}\n      className={cn(\n        buttonVariants({\n          color: 'secondary',\n          size: 'sm',\n          className: 'gap-1.5 not-prose',\n        }),\n        props.className,\n      )}\n    >\n      {props.children ?? (\n        <>\n          <Edit className=\"size-3.5\" />\n          <I18nLabel label=\"editOnGithub\" />\n        </>\n      )}\n    </a>\n  );\n}\n\n/**\n * Add typography styles\n */\nexport const DocsBody = forwardRef<HTMLDivElement, ComponentProps<'div'>>(\n  (props, ref) => (\n    <div ref={ref} {...props} className={cn('prose', props.className)}>\n      {props.children}\n    </div>\n  ),\n);\n\nDocsBody.displayName = 'DocsBody';\n\nexport const DocsDescription = forwardRef<\n  HTMLParagraphElement,\n  ComponentProps<'p'>\n>((props, ref) => {\n  // don't render if no description provided\n  if (props.children === undefined) return null;\n\n  return (\n    <p\n      ref={ref}\n      {...props}\n      className={cn('mb-8 text-lg text-fd-muted-foreground', props.className)}\n    >\n      {props.children}\n    </p>\n  );\n});\n\nDocsDescription.displayName = 'DocsDescription';\n\nexport const DocsTitle = forwardRef<HTMLHeadingElement, ComponentProps<'h1'>>(\n  (props, ref) => {\n    return (\n      <h1\n        ref={ref}\n        {...props}\n        className={cn('text-3xl font-semibold', props.className)}\n      >\n        {props.children}\n      </h1>\n    );\n  },\n);\n\nDocsTitle.displayName = 'DocsTitle';\n\n/**\n * For separate MDX page\n */\nexport function withArticle(props: ComponentProps<'main'>): ReactNode {\n  return (\n    <main {...props} className={cn('container py-12', props.className)}>\n      <article className=\"prose\">{props.children}</article>\n    </main>\n  );\n}\n",
      "path": "components:layouts/page.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "./page-client": "components:layouts/docs/page-client.tsx",
        "@/components/layout/toc": "components:layout/toc.tsx",
        "@/components/layout/toc-clerk": "components:layout/toc-clerk.tsx"
      },
      "content": "import { type ComponentProps } from 'react';\nimport { cn } from '@/utils/cn';\nimport {\n  type BreadcrumbProps,\n  type FooterProps,\n  PageBreadcrumb,\n  PageFooter,\n  PageLastUpdate,\n  PageTOC,\n  PageTOCPopover,\n  PageTOCPopoverContent,\n  PageTOCPopoverTrigger,\n  type RootProps,\n} from './page-client';\nimport { TOCItems, TOCProvider, TOCScrollArea } from '@/components/layout/toc';\nimport { Text } from 'lucide-react';\nimport { I18nLabel } from 'fumadocs-ui/contexts/i18n';\nimport ClerkTOCItems from '@/components/layout/toc-clerk';\n\n/**\n * Apply `prose` on div\n */\nexport function PageProse(props: ComponentProps<'div'>) {\n  return (\n    <div {...props} className={cn('prose', props.className)}>\n      {props.children}\n    </div>\n  );\n}\n\nexport function PageTOCTitle(props: ComponentProps<'h2'>) {\n  return (\n    <h3\n      {...props}\n      className={cn(\n        'inline-flex items-center gap-1.5 text-sm text-fd-muted-foreground',\n        props.className,\n      )}\n    >\n      <Text className=\"size-4\" />\n      <I18nLabel label=\"toc\" />\n    </h3>\n  );\n}\n\nexport function PageTOCItems({\n  variant = 'normal',\n  ...props\n}: ComponentProps<'div'> & { variant?: 'clerk' | 'normal' }) {\n  return (\n    <TOCScrollArea {...props}>\n      {variant === 'clerk' ? <ClerkTOCItems /> : <TOCItems />}\n    </TOCScrollArea>\n  );\n}\n\nexport function PageTOCPopoverItems({\n  variant = 'normal',\n  ...props\n}: ComponentProps<'div'> & { variant?: 'clerk' | 'normal' }) {\n  return (\n    <TOCScrollArea {...props}>\n      {variant === 'clerk' ? <ClerkTOCItems /> : <TOCItems />}\n    </TOCScrollArea>\n  );\n}\n\nexport function PageArticle(props: ComponentProps<'article'>) {\n  return (\n    <article\n      {...props}\n      className={cn(\n        'flex min-w-0 w-full flex-col gap-4 px-4 pt-8 md:px-6 md:mx-auto xl:pt-12 xl:px-12',\n        props.className,\n      )}\n    >\n      {props.children}\n    </article>\n  );\n}\n\nexport function PageRoot({ toc, children, ...props }: RootProps) {\n  return (\n    <TOCProvider {...toc}>\n      <div\n        id=\"nd-page\"\n        {...props}\n        className={cn(\n          'flex flex-1 w-full mx-auto max-w-(--fd-page-width) pt-(--fd-tocnav-height)',\n          props.className,\n        )}\n      >\n        {children}\n      </div>\n    </TOCProvider>\n  );\n}\n\nexport {\n  PageBreadcrumb,\n  PageFooter,\n  PageLastUpdate,\n  PageTOC,\n  PageTOCPopover,\n  PageTOCPopoverTrigger,\n  PageTOCPopoverContent,\n  type FooterProps,\n  type BreadcrumbProps,\n  type RootProps,\n};\n",
      "path": "components:layouts/docs/page.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/utils/is-active": "lib:is-active.ts",
        "@/components/ui/collapsible": "components:ui/collapsible.tsx",
        "@/components/layout/toc": "components:layout/toc.tsx"
      },
      "content": "'use client';\n\nimport {\n  type ComponentProps,\n  Fragment,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { ChevronDown, ChevronLeft, ChevronRight } from '@/icons';\nimport Link from 'fumadocs-core/link';\nimport { cn } from '@/utils/cn';\nimport { useI18n } from 'fumadocs-ui/contexts/i18n';\nimport { useTreeContext, useTreePath } from 'fumadocs-ui/contexts/tree';\nimport type { PageTree } from 'fumadocs-core/server';\nimport { createContext, usePathname } from 'fumadocs-core/framework';\nimport {\n  type BreadcrumbOptions,\n  getBreadcrumbItemsFromPath,\n} from 'fumadocs-core/breadcrumb';\nimport { useNav } from 'fumadocs-ui/contexts/layout';\nimport { isActive } from '@/utils/is-active';\nimport { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible';\nimport { useSidebar } from 'fumadocs-ui/contexts/sidebar';\nimport { useTOCItems } from '@/components/layout/toc';\nimport { type AnchorProviderProps, useActiveAnchor } from 'fumadocs-core/toc';\n\nconst TocPopoverContext = createContext<{\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}>('TocPopoverContext');\n\nexport function PageTOCPopoverTrigger(props: ComponentProps<'button'>) {\n  const { text } = useI18n();\n  const { open } = TocPopoverContext.use();\n  const items = useTOCItems();\n  const active = useActiveAnchor();\n  const selected = useMemo(\n    () => items.findIndex((item) => active === item.url.slice(1)),\n    [items, active],\n  );\n  const path = useTreePath().at(-1);\n  const showItem = selected !== -1 && !open;\n\n  return (\n    <CollapsibleTrigger\n      {...props}\n      className={cn(\n        'flex w-full h-(--fd-tocnav-height) items-center text-sm text-fd-muted-foreground gap-2.5 px-4 py-2.5 text-start focus-visible:outline-none [&_svg]:size-4 md:px-6',\n        props.className,\n      )}\n    >\n      <ProgressCircle\n        value={(selected + 1) / Math.max(1, items.length)}\n        max={1}\n        className={cn('shrink-0', open && 'text-fd-primary')}\n      />\n      <span className=\"grid flex-1 *:my-auto *:row-start-1 *:col-start-1\">\n        <span\n          className={cn(\n            'truncate transition-all',\n            open && 'text-fd-foreground',\n            showItem && 'opacity-0 -translate-y-full pointer-events-none',\n          )}\n        >\n          {path?.name ?? text.toc}\n        </span>\n        <span\n          className={cn(\n            'truncate transition-all',\n            !showItem && 'opacity-0 translate-y-full pointer-events-none',\n          )}\n        >\n          {items[selected]?.title}\n        </span>\n      </span>\n      <ChevronDown\n        className={cn(\n          'shrink-0 transition-transform mx-0.5',\n          open && 'rotate-180',\n        )}\n      />\n    </CollapsibleTrigger>\n  );\n}\n\ninterface ProgressCircleProps\n  extends Omit<React.ComponentProps<'svg'>, 'strokeWidth'> {\n  value: number;\n  strokeWidth?: number;\n  size?: number;\n  min?: number;\n  max?: number;\n}\n\nfunction clamp(input: number, min: number, max: number): number {\n  if (input < min) return min;\n  if (input > max) return max;\n  return input;\n}\n\nfunction ProgressCircle({\n  value,\n  strokeWidth = 2,\n  size = 24,\n  min = 0,\n  max = 100,\n  ...restSvgProps\n}: ProgressCircleProps) {\n  const normalizedValue = clamp(value, min, max);\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n  const progress = (normalizedValue / max) * circumference;\n  const circleProps = {\n    cx: size / 2,\n    cy: size / 2,\n    r: radius,\n    fill: 'none',\n    strokeWidth,\n  };\n\n  return (\n    <svg\n      role=\"progressbar\"\n      viewBox={`0 0 ${size} ${size}`}\n      aria-valuenow={normalizedValue}\n      aria-valuemin={min}\n      aria-valuemax={max}\n      {...restSvgProps}\n    >\n      <circle {...circleProps} className=\"stroke-current/25\" />\n      <circle\n        {...circleProps}\n        stroke=\"currentColor\"\n        strokeDasharray={circumference}\n        strokeDashoffset={circumference - progress}\n        strokeLinecap=\"round\"\n        transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        className=\"transition-all\"\n      />\n    </svg>\n  );\n}\n\nexport function PageTOCPopoverContent(props: ComponentProps<'div'>) {\n  return (\n    <CollapsibleContent\n      data-toc-popover=\"\"\n      {...props}\n      className={cn('flex flex-col px-4 max-h-[50vh] md:px-6', props.className)}\n    >\n      {props.children}\n    </CollapsibleContent>\n  );\n}\n\nexport function PageTOCPopover(props: ComponentProps<'div'>) {\n  const ref = useRef<HTMLElement>(null);\n  const [open, setOpen] = useState(false);\n  const { collapsed } = useSidebar();\n  const { isTransparent } = useNav();\n\n  const onClick = useEffectEvent((e: Event) => {\n    if (!open) return;\n\n    if (ref.current && !ref.current.contains(e.target as HTMLElement))\n      setOpen(false);\n  });\n\n  useEffect(() => {\n    window.addEventListener('click', onClick);\n\n    return () => {\n      window.removeEventListener('click', onClick);\n    };\n  }, [onClick]);\n\n  return (\n    <TocPopoverContext.Provider\n      value={useMemo(\n        () => ({\n          open,\n          setOpen,\n        }),\n        [setOpen, open],\n      )}\n    >\n      <Collapsible open={open} onOpenChange={setOpen} asChild>\n        <header\n          ref={ref}\n          id=\"nd-tocnav\"\n          {...props}\n          className={cn(\n            'fixed inset-x-0 z-10 border-b backdrop-blur-sm transition-colors xl:hidden',\n            (!isTransparent || open) && 'bg-fd-background/80',\n            open && 'shadow-lg',\n            props.className,\n          )}\n          style={{\n            ...props.style,\n            top: 'calc(var(--fd-banner-height) + var(--fd-nav-height))',\n            insetInlineStart: collapsed\n              ? '0px'\n              : 'calc(var(--fd-sidebar-width) + var(--fd-layout-offset))',\n          }}\n        >\n          {props.children}\n        </header>\n      </Collapsible>\n    </TocPopoverContext.Provider>\n  );\n}\n\nexport interface RootProps extends ComponentProps<'div'> {\n  toc: Omit<AnchorProviderProps, 'children'>;\n}\n\nexport function PageLastUpdate({\n  date: value,\n  ...props\n}: Omit<ComponentProps<'p'>, 'children'> & { date: Date | string }) {\n  const { text } = useI18n();\n  const [date, setDate] = useState('');\n\n  useEffect(() => {\n    // to the timezone of client\n    setDate(new Date(value).toLocaleDateString());\n  }, [value]);\n\n  return (\n    <p\n      {...props}\n      className={cn('text-sm text-fd-muted-foreground', props.className)}\n    >\n      {text.lastUpdate} {date}\n    </p>\n  );\n}\n\ntype Item = Pick<PageTree.Item, 'name' | 'description' | 'url'>;\nexport interface FooterProps extends ComponentProps<'div'> {\n  /**\n   * Items including information for the next and previous page\n   */\n  items?: {\n    previous?: Item;\n    next?: Item;\n  };\n}\n\nfunction scanNavigationList(tree: PageTree.Node[]) {\n  const list: PageTree.Item[] = [];\n\n  tree.forEach((node) => {\n    if (node.type === 'folder') {\n      if (node.index) {\n        list.push(node.index);\n      }\n\n      list.push(...scanNavigationList(node.children));\n      return;\n    }\n\n    if (node.type === 'page' && !node.external) {\n      list.push(node);\n    }\n  });\n\n  return list;\n}\n\nconst listCache = new Map<string, PageTree.Item[]>();\n\nexport function PageFooter({ items, ...props }: FooterProps) {\n  const { root } = useTreeContext();\n  const pathname = usePathname();\n\n  const { previous, next } = useMemo(() => {\n    if (items) return items;\n\n    const cached = listCache.get(root.$id);\n    const list = cached ?? scanNavigationList(root.children);\n    listCache.set(root.$id, list);\n\n    const idx = list.findIndex((item) => isActive(item.url, pathname, false));\n\n    if (idx === -1) return {};\n    return {\n      previous: list[idx - 1],\n      next: list[idx + 1],\n    };\n  }, [items, pathname, root]);\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        '@container grid gap-4 pb-6',\n        previous && next ? 'grid-cols-2' : 'grid-cols-1',\n        props.className,\n      )}\n    >\n      {previous ? <FooterItem item={previous} index={0} /> : null}\n      {next ? <FooterItem item={next} index={1} /> : null}\n    </div>\n  );\n}\n\nfunction FooterItem({ item, index }: { item: Item; index: 0 | 1 }) {\n  const { text } = useI18n();\n  const Icon = index === 0 ? ChevronLeft : ChevronRight;\n\n  return (\n    <Link\n      href={item.url}\n      className={cn(\n        'flex flex-col gap-2 rounded-lg border p-4 text-sm transition-colors hover:bg-fd-accent/80 hover:text-fd-accent-foreground @max-lg:col-span-full',\n        index === 1 && 'text-end',\n      )}\n    >\n      <div\n        className={cn(\n          'inline-flex items-center gap-1.5 font-medium',\n          index === 1 && 'flex-row-reverse',\n        )}\n      >\n        <Icon className=\"-mx-1 size-4 shrink-0 rtl:rotate-180\" />\n        <p>{item.name}</p>\n      </div>\n      <p className=\"text-fd-muted-foreground truncate\">\n        {item.description ?? (index === 0 ? text.previousPage : text.nextPage)}\n      </p>\n    </Link>\n  );\n}\n\nexport type BreadcrumbProps = BreadcrumbOptions & ComponentProps<'div'>;\n\nexport function PageBreadcrumb({\n  includeRoot = false,\n  includeSeparator,\n  includePage = false,\n  ...props\n}: BreadcrumbProps) {\n  const path = useTreePath();\n  const { root } = useTreeContext();\n  const items = useMemo(() => {\n    return getBreadcrumbItemsFromPath(root, path, {\n      includePage,\n      includeSeparator,\n      includeRoot,\n    });\n  }, [includePage, includeRoot, includeSeparator, path, root]);\n\n  if (items.length === 0) return null;\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        'flex items-center gap-1.5 text-sm text-fd-muted-foreground',\n        props.className,\n      )}\n    >\n      {items.map((item, i) => {\n        const className = cn(\n          'truncate',\n          i === items.length - 1 && 'text-fd-primary font-medium',\n        );\n\n        return (\n          <Fragment key={i}>\n            {i !== 0 && <ChevronRight className=\"size-3.5 shrink-0\" />}\n            {item.url ? (\n              <Link\n                href={item.url}\n                className={cn(className, 'transition-opacity hover:opacity-80')}\n              >\n                {item.name}\n              </Link>\n            ) : (\n              <span className={className}>{item.name}</span>\n            )}\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nexport function PageTOC(props: ComponentProps<'div'>) {\n  return (\n    <div\n      id=\"nd-toc\"\n      {...props}\n      className={cn('sticky pb-2 pt-12 max-xl:hidden', props.className)}\n      style={{\n        ...props.style,\n        top: 'calc(var(--fd-banner-height) + var(--fd-nav-height))',\n        height: 'calc(100dvh - var(--fd-banner-height) - var(--fd-nav-height))',\n      }}\n    >\n      <div className=\"flex h-full w-(--fd-toc-width) max-w-full flex-col pe-4\">\n        {props.children}\n      </div>\n    </div>\n  );\n}\n",
      "path": "components:layouts/docs/page-client.tsx"
    },
    {
      "imports": {},
      "content": "export function isActive(\n  url: string,\n  pathname: string,\n  nested = true,\n): boolean {\n  if (url.endsWith('/')) url = url.slice(0, -1);\n  if (pathname.endsWith('/')) pathname = pathname.slice(0, -1);\n\n  return url === pathname || (nested && pathname.startsWith(`${url}/`));\n}\n",
      "path": "lib:is-active.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { forwardRef, useEffect, useState } from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Collapsible = CollapsiblePrimitive.Root;\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\n\nconst CollapsibleContent = forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.CollapsibleContent>\n>(({ children, ...props }, ref) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      ref={ref}\n      {...props}\n      className={cn(\n        'overflow-hidden',\n        mounted &&\n          'data-[state=closed]:animate-fd-collapsible-up data-[state=open]:animate-fd-collapsible-down',\n        props.className,\n      )}\n    >\n      {children}\n    </CollapsiblePrimitive.CollapsibleContent>\n  );\n});\n\nCollapsibleContent.displayName =\n  CollapsiblePrimitive.CollapsibleContent.displayName;\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
      "path": "components:ui/collapsible.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/layout/toc-thumb": "components:layout/toc-thumb.tsx",
        "@/utils/merge-refs": "lib:merge-refs.ts"
      },
      "content": "'use client';\nimport type { TOCItemType } from 'fumadocs-core/server';\nimport * as Primitive from 'fumadocs-core/toc';\nimport { type ComponentProps, createContext, useContext, useRef } from 'react';\nimport { cn } from '@/utils/cn';\nimport { useI18n } from 'fumadocs-ui/contexts/i18n';\nimport { TocThumb } from '@/components/layout/toc-thumb';\nimport { mergeRefs } from '@/utils/merge-refs';\n\nconst TOCContext = createContext<TOCItemType[]>([]);\n\nexport function useTOCItems(): TOCItemType[] {\n  return useContext(TOCContext);\n}\n\nexport function TOCProvider({\n  toc,\n  children,\n  ...props\n}: ComponentProps<typeof Primitive.AnchorProvider>) {\n  return (\n    <TOCContext value={toc}>\n      <Primitive.AnchorProvider toc={toc} {...props}>\n        {children}\n      </Primitive.AnchorProvider>\n    </TOCContext>\n  );\n}\n\nexport function TOCScrollArea({\n  ref,\n  className,\n  ...props\n}: ComponentProps<'div'>) {\n  const viewRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      ref={mergeRefs(viewRef, ref)}\n      className={cn(\n        'relative min-h-0 text-sm ms-px overflow-auto [scrollbar-width:none] [mask-image:linear-gradient(to_bottom,transparent,white_16px,white_calc(100%-16px),transparent)] py-3',\n        className,\n      )}\n      {...props}\n    >\n      <Primitive.ScrollProvider containerRef={viewRef}>\n        {props.children}\n      </Primitive.ScrollProvider>\n    </div>\n  );\n}\n\nexport function TOCItems({ ref, className, ...props }: ComponentProps<'div'>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const items = useTOCItems();\n  const { text } = useI18n();\n\n  if (items.length === 0)\n    return (\n      <div className=\"rounded-lg border bg-fd-card p-3 text-xs text-fd-muted-foreground\">\n        {text.tocNoHeadings}\n      </div>\n    );\n\n  return (\n    <>\n      <TocThumb\n        containerRef={containerRef}\n        className=\"absolute top-(--fd-top) h-(--fd-height) w-px bg-fd-primary transition-all\"\n      />\n      <div\n        ref={mergeRefs(ref, containerRef)}\n        className={cn(\n          'flex flex-col border-s border-fd-foreground/10',\n          className,\n        )}\n        {...props}\n      >\n        {items.map((item) => (\n          <TOCItem key={item.url} item={item} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nfunction TOCItem({ item }: { item: TOCItemType }) {\n  return (\n    <Primitive.TOCItem\n      href={item.url}\n      className={cn(\n        'prose py-1.5 text-sm text-fd-muted-foreground transition-colors [overflow-wrap:anywhere] first:pt-0 last:pb-0 data-[active=true]:text-fd-primary',\n        item.depth <= 2 && 'ps-3',\n        item.depth === 3 && 'ps-6',\n        item.depth >= 4 && 'ps-8',\n      )}\n    >\n      {item.title}\n    </Primitive.TOCItem>\n  );\n}\n",
      "path": "components:layout/toc.tsx"
    },
    {
      "imports": {},
      "content": "import { type HTMLAttributes, type RefObject, useEffect, useRef } from 'react';\nimport * as Primitive from 'fumadocs-core/toc';\nimport { useOnChange } from 'fumadocs-core/utils/use-on-change';\nimport { useEffectEvent } from 'fumadocs-core/utils/use-effect-event';\n\nexport type TOCThumb = [top: number, height: number];\n\nfunction calc(container: HTMLElement, active: string[]): TOCThumb {\n  if (active.length === 0 || container.clientHeight === 0) {\n    return [0, 0];\n  }\n\n  let upper = Number.MAX_VALUE,\n    lower = 0;\n\n  for (const item of active) {\n    const element = container.querySelector<HTMLElement>(`a[href=\"#${item}\"]`);\n    if (!element) continue;\n\n    const styles = getComputedStyle(element);\n    upper = Math.min(upper, element.offsetTop + parseFloat(styles.paddingTop));\n    lower = Math.max(\n      lower,\n      element.offsetTop +\n        element.clientHeight -\n        parseFloat(styles.paddingBottom),\n    );\n  }\n\n  return [upper, lower - upper];\n}\n\nfunction update(element: HTMLElement, info: TOCThumb): void {\n  element.style.setProperty('--fd-top', `${info[0]}px`);\n  element.style.setProperty('--fd-height', `${info[1]}px`);\n}\n\nexport function TocThumb({\n  containerRef,\n  ...props\n}: HTMLAttributes<HTMLDivElement> & {\n  containerRef: RefObject<HTMLElement | null>;\n}) {\n  const active = Primitive.useActiveAnchors();\n  const thumbRef = useRef<HTMLDivElement>(null);\n\n  const onResize = useEffectEvent(() => {\n    if (!containerRef.current || !thumbRef.current) return;\n\n    update(thumbRef.current, calc(containerRef.current, active));\n  });\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    onResize();\n    const observer = new ResizeObserver(onResize);\n    observer.observe(container);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [containerRef, onResize]);\n\n  useOnChange(active, () => {\n    if (!containerRef.current || !thumbRef.current) return;\n\n    update(thumbRef.current, calc(containerRef.current, active));\n  });\n\n  return <div ref={thumbRef} role=\"none\" {...props} />;\n}\n",
      "path": "components:layout/toc-thumb.tsx"
    },
    {
      "imports": {},
      "content": "import type * as React from 'react';\n\nexport function mergeRefs<T>(\n  ...refs: (React.Ref<T> | undefined)[]\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        ref.current = value;\n      }\n    });\n  };\n}\n",
      "path": "lib:merge-refs.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/layout/toc-thumb": "components:layout/toc-thumb.tsx",
        "@/components/layout/toc": "components:layout/toc.tsx",
        "@/utils/merge-refs": "lib:merge-refs.ts"
      },
      "content": "'use client';\nimport type { TOCItemType } from 'fumadocs-core/server';\nimport * as Primitive from 'fumadocs-core/toc';\nimport { type ComponentProps, useEffect, useRef, useState } from 'react';\nimport { cn } from '@/utils/cn';\nimport { TocThumb } from '@/components/layout/toc-thumb';\nimport { useTOCItems } from '@/components/layout/toc';\nimport { mergeRefs } from '@/utils/merge-refs';\nimport { useI18n } from 'fumadocs-ui/contexts/i18n';\n\nexport default function ClerkTOCItems({\n  ref,\n  className,\n  ...props\n}: ComponentProps<'div'>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const items = useTOCItems();\n  const { text } = useI18n();\n\n  const [svg, setSvg] = useState<{\n    path: string;\n    width: number;\n    height: number;\n  }>();\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    function onResize(): void {\n      if (container.clientHeight === 0) return;\n      let w = 0,\n        h = 0;\n      const d: string[] = [];\n      for (let i = 0; i < items.length; i++) {\n        const element: HTMLElement | null = container.querySelector(\n          `a[href=\"#${items[i].url.slice(1)}\"]`,\n        );\n        if (!element) continue;\n\n        const styles = getComputedStyle(element);\n        const offset = getLineOffset(items[i].depth) + 1,\n          top = element.offsetTop + parseFloat(styles.paddingTop),\n          bottom =\n            element.offsetTop +\n            element.clientHeight -\n            parseFloat(styles.paddingBottom);\n\n        w = Math.max(offset, w);\n        h = Math.max(h, bottom);\n\n        d.push(`${i === 0 ? 'M' : 'L'}${offset} ${top}`);\n        d.push(`L${offset} ${bottom}`);\n      }\n\n      setSvg({\n        path: d.join(' '),\n        width: w + 1,\n        height: h,\n      });\n    }\n\n    const observer = new ResizeObserver(onResize);\n    onResize();\n\n    observer.observe(container);\n    return () => {\n      observer.disconnect();\n    };\n  }, [items]);\n\n  if (items.length === 0)\n    return (\n      <div className=\"rounded-lg border bg-fd-card p-3 text-xs text-fd-muted-foreground\">\n        {text.tocNoHeadings}\n      </div>\n    );\n\n  return (\n    <>\n      {svg ? (\n        <div\n          className=\"absolute start-0 top-0 rtl:-scale-x-100\"\n          style={{\n            width: svg.width,\n            height: svg.height,\n            maskImage: `url(\"data:image/svg+xml,${\n              // Inline SVG\n              encodeURIComponent(\n                `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${svg.width} ${svg.height}\"><path d=\"${svg.path}\" stroke=\"black\" stroke-width=\"1\" fill=\"none\" /></svg>`,\n              )\n            }\")`,\n          }}\n        >\n          <TocThumb\n            containerRef={containerRef}\n            className=\"mt-(--fd-top) h-(--fd-height) bg-fd-primary transition-all\"\n          />\n        </div>\n      ) : null}\n      <div\n        ref={mergeRefs(containerRef, ref)}\n        className={cn('flex flex-col', className)}\n        {...props}\n      >\n        {items.map((item, i) => (\n          <TOCItem\n            key={item.url}\n            item={item}\n            upper={items[i - 1]?.depth}\n            lower={items[i + 1]?.depth}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nfunction getItemOffset(depth: number): number {\n  if (depth <= 2) return 14;\n  if (depth === 3) return 26;\n  return 36;\n}\n\nfunction getLineOffset(depth: number): number {\n  return depth >= 3 ? 10 : 0;\n}\n\nfunction TOCItem({\n  item,\n  upper = item.depth,\n  lower = item.depth,\n}: {\n  item: TOCItemType;\n  upper?: number;\n  lower?: number;\n}) {\n  const offset = getLineOffset(item.depth),\n    upperOffset = getLineOffset(upper),\n    lowerOffset = getLineOffset(lower);\n\n  return (\n    <Primitive.TOCItem\n      href={item.url}\n      style={{\n        paddingInlineStart: getItemOffset(item.depth),\n      }}\n      className=\"prose relative py-1.5 text-sm text-fd-muted-foreground hover:text-fd-accent-foreground transition-colors [overflow-wrap:anywhere] first:pt-0 last:pb-0 data-[active=true]:text-fd-primary\"\n    >\n      {offset !== upperOffset ? (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 16 16\"\n          className=\"absolute -top-1.5 start-0 size-4 rtl:-scale-x-100\"\n        >\n          <line\n            x1={upperOffset}\n            y1=\"0\"\n            x2={offset}\n            y2=\"12\"\n            className=\"stroke-fd-foreground/10\"\n            strokeWidth=\"1\"\n          />\n        </svg>\n      ) : null}\n      <div\n        className={cn(\n          'absolute inset-y-0 w-px bg-fd-foreground/10',\n          offset !== upperOffset && 'top-1.5',\n          offset !== lowerOffset && 'bottom-1.5',\n        )}\n        style={{\n          insetInlineStart: offset,\n        }}\n      />\n      {item.title}\n    </Primitive.TOCItem>\n  );\n}\n",
      "path": "components:layout/toc-clerk.tsx"
    }
  ],
  "subComponents": ["button"],
  "dependencies": {
    "react": "",
    "lucide-react": "",
    "fumadocs-ui": "",
    "fumadocs-core": "",
    "tailwind-merge": "^3.3.1",
    "@radix-ui/react-collapsible": "^1.1.11"
  },
  "devDependencies": {}
}
