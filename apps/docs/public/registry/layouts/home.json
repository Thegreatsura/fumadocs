{
  "name": "layouts/home",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "./shared": "components:layouts/shared.tsx",
        "@/layouts/home/navbar": "components:layouts/home/navbar.tsx",
        "@/layouts/links": "components:layouts/links.tsx",
        "@/components/layout/search-toggle": "components:layout/search-toggle.tsx",
        "@/components/layout/theme-toggle": "components:layout/theme-toggle.tsx",
        "@/components/layout/language-toggle": "components:layout/language-toggle.tsx",
        "@/layouts/home/menu": "components:layouts/home/menu.tsx",
        "@/components/ui/button": "components:ui/button.tsx"
      },
      "content": "import { Fragment, type HTMLAttributes, useMemo } from 'react';\nimport { cn } from '@/utils/cn';\nimport { type BaseLayoutProps, getLinks, type NavOptions } from './shared';\nimport { NavProvider } from 'fumadocs-ui/contexts/layout';\nimport {\n  Navbar,\n  NavbarLink,\n  NavbarMenu,\n  NavbarMenuContent,\n  NavbarMenuLink,\n  NavbarMenuTrigger,\n} from '@/layouts/home/navbar';\nimport { type LinkItemType } from '@/layouts/links';\nimport {\n  LargeSearchToggle,\n  SearchToggle,\n} from '@/components/layout/search-toggle';\nimport { ThemeToggle } from '@/components/layout/theme-toggle';\nimport {\n  LanguageToggle,\n  LanguageToggleText,\n} from '@/components/layout/language-toggle';\nimport { ChevronDown, Languages } from 'lucide-react';\nimport Link from 'fumadocs-core/link';\nimport {\n  Menu,\n  MenuContent,\n  MenuLinkItem,\n  MenuTrigger,\n} from '@/layouts/home/menu';\nimport { buttonVariants } from '@/components/ui/button';\n\nexport interface HomeLayoutProps extends BaseLayoutProps {\n  nav?: Partial<\n    NavOptions & {\n      /**\n       * Open mobile menu when hovering the trigger\n       */\n      enableHoverToOpen?: boolean;\n    }\n  >;\n}\n\nexport function HomeLayout(\n  props: HomeLayoutProps & HTMLAttributes<HTMLElement>,\n) {\n  const {\n    nav = {},\n    links,\n    githubUrl,\n    i18n,\n    disableThemeSwitch = false,\n    themeSwitch = { enabled: !disableThemeSwitch },\n    searchToggle,\n    ...rest\n  } = props;\n\n  return (\n    <NavProvider transparentMode={nav?.transparentMode}>\n      <main\n        id=\"nd-home-layout\"\n        {...rest}\n        className={cn('flex flex-1 flex-col pt-14', rest.className)}\n      >\n        {nav.enabled !== false &&\n          (nav.component ?? (\n            <Header\n              links={links}\n              nav={nav}\n              themeSwitch={themeSwitch}\n              searchToggle={searchToggle}\n              i18n={i18n}\n              githubUrl={githubUrl}\n            />\n          ))}\n        {props.children}\n      </main>\n    </NavProvider>\n  );\n}\n\nexport function Header({\n  nav = {},\n  i18n = false,\n  links,\n  githubUrl,\n  themeSwitch = {},\n  searchToggle = {},\n}: HomeLayoutProps) {\n  const finalLinks = useMemo(\n    () => getLinks(links, githubUrl),\n    [links, githubUrl],\n  );\n\n  const navItems = finalLinks.filter((item) =>\n    ['nav', 'all'].includes(item.on ?? 'all'),\n  );\n  const menuItems = finalLinks.filter((item) =>\n    ['menu', 'all'].includes(item.on ?? 'all'),\n  );\n\n  return (\n    <Navbar>\n      <Link\n        href={nav.url ?? '/'}\n        className=\"inline-flex items-center gap-2.5 font-semibold\"\n      >\n        {nav.title}\n      </Link>\n      {nav.children}\n      <ul className=\"flex flex-row items-center gap-2 px-6 max-sm:hidden\">\n        {navItems\n          .filter((item) => !isSecondary(item))\n          .map((item, i) => (\n            <NavbarLinkItem key={i} item={item} className=\"text-sm\" />\n          ))}\n      </ul>\n      <div className=\"flex flex-row items-center justify-end gap-1.5 flex-1\">\n        {searchToggle.enabled !== false && (\n          <>\n            {searchToggle.components?.sm ?? (\n              <SearchToggle className=\"p-2 lg:hidden\" hideIfDisabled />\n            )}\n            {searchToggle.components?.lg ?? (\n              <LargeSearchToggle\n                className=\"w-full rounded-full ps-2.5 max-w-[240px] max-lg:hidden\"\n                hideIfDisabled\n              />\n            )}\n          </>\n        )}\n        {themeSwitch.enabled !== false &&\n          (themeSwitch.component ?? (\n            <ThemeToggle className=\"max-lg:hidden\" mode={themeSwitch?.mode} />\n          ))}\n        {i18n ? (\n          <LanguageToggle className=\"max-lg:hidden\">\n            <Languages className=\"size-5\" />\n          </LanguageToggle>\n        ) : null}\n      </div>\n      <ul className=\"flex flex-row items-center\">\n        {navItems.filter(isSecondary).map((item, i) => (\n          <NavbarLinkItem key={i} item={item} className=\"max-lg:hidden\" />\n        ))}\n        <Menu className=\"lg:hidden\">\n          <MenuTrigger\n            aria-label=\"Toggle Menu\"\n            className={cn(\n              buttonVariants({\n                size: 'icon',\n                color: 'ghost',\n                className: 'group -me-1.5',\n              }),\n            )}\n            enableHover={nav.enableHoverToOpen}\n          >\n            <ChevronDown className=\"!size-5.5 transition-transform duration-300 group-data-[state=open]:rotate-180\" />\n          </MenuTrigger>\n          <MenuContent className=\"sm:flex-row sm:items-center sm:justify-end\">\n            {menuItems\n              .filter((item) => !isSecondary(item))\n              .map((item, i) => (\n                <MenuLinkItem key={i} item={item} className=\"sm:hidden\" />\n              ))}\n            <div className=\"-ms-1.5 flex flex-row items-center gap-1.5 max-sm:mt-2\">\n              {menuItems.filter(isSecondary).map((item, i) => (\n                <MenuLinkItem key={i} item={item} className=\"-me-1.5\" />\n              ))}\n              <div role=\"separator\" className=\"flex-1\" />\n              {i18n ? (\n                <LanguageToggle>\n                  <Languages className=\"size-5\" />\n                  <LanguageToggleText />\n                  <ChevronDown className=\"size-3 text-fd-muted-foreground\" />\n                </LanguageToggle>\n              ) : null}\n              {themeSwitch.enabled !== false &&\n                (themeSwitch.component ?? (\n                  <ThemeToggle mode={themeSwitch?.mode} />\n                ))}\n            </div>\n          </MenuContent>\n        </Menu>\n      </ul>\n    </Navbar>\n  );\n}\n\nfunction NavbarLinkItem({\n  item,\n  ...props\n}: {\n  item: LinkItemType;\n  className?: string;\n}) {\n  if (item.type === 'custom') return <div {...props}>{item.children}</div>;\n\n  if (item.type === 'menu') {\n    const children = item.items.map((child, j) => {\n      if (child.type === 'custom')\n        return <Fragment key={j}>{child.children}</Fragment>;\n\n      const {\n        banner = child.icon ? (\n          <div className=\"w-fit rounded-md border bg-fd-muted p-1 [&_svg]:size-4\">\n            {child.icon}\n          </div>\n        ) : null,\n        ...rest\n      } = child.menu ?? {};\n\n      return (\n        <NavbarMenuLink\n          key={j}\n          href={child.url}\n          external={child.external}\n          {...rest}\n        >\n          {rest.children ?? (\n            <>\n              {banner}\n              <p className=\"text-[15px] font-medium\">{child.text}</p>\n              <p className=\"text-sm text-fd-muted-foreground empty:hidden\">\n                {child.description}\n              </p>\n            </>\n          )}\n        </NavbarMenuLink>\n      );\n    });\n\n    return (\n      <NavbarMenu>\n        <NavbarMenuTrigger {...props}>\n          {item.url ? <Link href={item.url}>{item.text}</Link> : item.text}\n        </NavbarMenuTrigger>\n        <NavbarMenuContent>{children}</NavbarMenuContent>\n      </NavbarMenu>\n    );\n  }\n\n  return (\n    <NavbarLink\n      {...props}\n      item={item}\n      variant={item.type}\n      aria-label={item.type === 'icon' ? item.label : undefined}\n    >\n      {item.type === 'icon' ? item.icon : item.text}\n    </NavbarLink>\n  );\n}\n\nfunction isSecondary(item: LinkItemType): boolean {\n  return (\n    ('secondary' in item && item.secondary === true) || item.type === 'icon'\n  );\n}\n",
      "path": "components:layouts/home.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/layouts/links": "components:layouts/links.tsx"
      },
      "content": "import type { ReactNode } from 'react';\nimport type { LinkItemType } from '@/layouts/links';\nimport type { NavProviderProps } from 'fumadocs-ui/contexts/layout';\nimport type { I18nConfig } from 'fumadocs-core/i18n';\n\nexport interface NavOptions extends NavProviderProps {\n  enabled: boolean;\n  component: ReactNode;\n\n  title?: ReactNode;\n\n  /**\n   * Redirect url of title\n   * @defaultValue '/'\n   */\n  url?: string;\n\n  children?: ReactNode;\n}\n\nexport interface BaseLayoutProps {\n  themeSwitch?: {\n    enabled?: boolean;\n    component?: ReactNode;\n    mode?: 'light-dark' | 'light-dark-system';\n  };\n\n  searchToggle?: Partial<{\n    enabled: boolean;\n    components: Partial<{\n      sm: ReactNode;\n      lg: ReactNode;\n    }>;\n  }>;\n\n  /**\n   * Remove theme switcher component\n   *\n   * @deprecated Use `themeSwitch.enabled` instead.\n   */\n  disableThemeSwitch?: boolean;\n\n  /**\n   * I18n options\n   *\n   * @defaultValue false\n   */\n  i18n?: boolean | I18nConfig;\n\n  /**\n   * GitHub url\n   */\n  githubUrl?: string;\n\n  links?: LinkItemType[];\n  /**\n   * Replace or disable navbar\n   */\n  nav?: Partial<NavOptions>;\n\n  children?: ReactNode;\n}\n\nexport { type LinkItemType };\n\n/**\n * Get Links Items with shortcuts\n */\nexport function getLinks(\n  links: LinkItemType[] = [],\n  githubUrl?: string,\n): LinkItemType[] {\n  let result = links ?? [];\n\n  if (githubUrl)\n    result = [\n      ...result,\n      {\n        type: 'icon',\n        url: githubUrl,\n        text: 'Github',\n        label: 'GitHub',\n        icon: (\n          <svg role=\"img\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n          </svg>\n        ),\n        external: true,\n      },\n    ];\n\n  return result;\n}\n",
      "path": "components:layouts/shared.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/layouts/links": "components:layouts/links.tsx",
        "@/components/ui/navigation-menu": "components:ui/navigation-menu.tsx",
        "@/components/ui/button": "components:ui/button.tsx"
      },
      "content": "'use client';\nimport { type ComponentProps, useState } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport Link, { type LinkProps } from 'fumadocs-core/link';\nimport { cn } from '@/utils/cn';\nimport { BaseLinkItem } from '@/layouts/links';\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from '@/components/ui/navigation-menu';\nimport { useNav } from 'fumadocs-ui/contexts/layout';\nimport type {\n  NavigationMenuContentProps,\n  NavigationMenuTriggerProps,\n} from '@radix-ui/react-navigation-menu';\nimport { buttonVariants } from '@/components/ui/button';\n\nconst navItemVariants = cva(\n  'inline-flex items-center gap-1 p-2 text-fd-muted-foreground transition-colors hover:text-fd-accent-foreground data-[active=true]:text-fd-primary [&_svg]:size-4',\n);\n\nexport function Navbar(props: ComponentProps<'div'>) {\n  const [value, setValue] = useState('');\n  const { isTransparent } = useNav();\n\n  return (\n    <NavigationMenu value={value} onValueChange={setValue} asChild>\n      <header\n        id=\"nd-nav\"\n        {...props}\n        className={cn(\n          'fixed top-(--fd-banner-height) z-40 left-0 backdrop-blur-lg border-b transition-colors *:mx-auto *:max-w-fd-container',\n          value.length > 0 && 'max-lg:shadow-lg max-lg:rounded-b-2xl',\n          (!isTransparent || value.length > 0) && 'bg-fd-background/80',\n          props.className,\n        )}\n        style={{\n          right: 'var(--removed-body-scroll-bar-size, 0px)',\n        }}\n      >\n        <NavigationMenuList\n          className=\"flex h-14 w-full items-center px-4\"\n          asChild\n        >\n          <nav>{props.children}</nav>\n        </NavigationMenuList>\n\n        <NavigationMenuViewport />\n      </header>\n    </NavigationMenu>\n  );\n}\n\nexport const NavbarMenu = NavigationMenuItem;\n\nexport function NavbarMenuContent(props: NavigationMenuContentProps) {\n  return (\n    <NavigationMenuContent\n      {...props}\n      className={cn(\n        'grid grid-cols-1 gap-2 p-4 md:grid-cols-2 lg:grid-cols-3',\n        props.className,\n      )}\n    >\n      {props.children}\n    </NavigationMenuContent>\n  );\n}\n\nexport function NavbarMenuTrigger(props: NavigationMenuTriggerProps) {\n  return (\n    <NavigationMenuTrigger\n      {...props}\n      className={cn(navItemVariants(), 'rounded-md', props.className)}\n    >\n      {props.children}\n    </NavigationMenuTrigger>\n  );\n}\n\nexport function NavbarMenuLink(props: LinkProps) {\n  return (\n    <NavigationMenuLink asChild>\n      <Link\n        {...props}\n        className={cn(\n          'flex flex-col gap-2 rounded-lg border bg-fd-card p-3 transition-colors hover:bg-fd-accent/80 hover:text-fd-accent-foreground',\n          props.className,\n        )}\n      >\n        {props.children}\n      </Link>\n    </NavigationMenuLink>\n  );\n}\n\nconst linkVariants = cva('', {\n  variants: {\n    variant: {\n      main: navItemVariants(),\n      button: buttonVariants({\n        color: 'secondary',\n        className: 'gap-1.5 [&_svg]:size-4',\n      }),\n      icon: buttonVariants({\n        color: 'ghost',\n        size: 'icon',\n      }),\n    },\n  },\n  defaultVariants: {\n    variant: 'main',\n  },\n});\n\nexport function NavbarLink({\n  item,\n  variant,\n  ...props\n}: ComponentProps<typeof BaseLinkItem> & VariantProps<typeof linkVariants>) {\n  return (\n    <NavigationMenuItem>\n      <NavigationMenuLink asChild>\n        <BaseLinkItem\n          {...props}\n          item={item}\n          className={cn(linkVariants({ variant }), props.className)}\n        >\n          {props.children}\n        </BaseLinkItem>\n      </NavigationMenuLink>\n    </NavigationMenuItem>\n  );\n}\n",
      "path": "components:layouts/home/navbar.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport * as React from 'react';\nimport * as Primitive from '@radix-ui/react-navigation-menu';\nimport { cn } from '@/utils/cn';\n\nconst NavigationMenu = Primitive.Root;\n\nconst NavigationMenuList = Primitive.List;\n\nconst NavigationMenuItem = React.forwardRef<\n  React.ComponentRef<typeof Primitive.NavigationMenuItem>,\n  React.ComponentPropsWithoutRef<typeof Primitive.NavigationMenuItem>\n>(({ className, children, ...props }, ref) => (\n  <Primitive.NavigationMenuItem\n    ref={ref}\n    className={cn('list-none', className)}\n    {...props}\n  >\n    {children}\n  </Primitive.NavigationMenuItem>\n));\n\nNavigationMenuItem.displayName = Primitive.NavigationMenuItem.displayName;\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ComponentRef<typeof Primitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof Primitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <Primitive.Trigger\n    ref={ref}\n    className={cn('data-[state=open]:bg-fd-accent/50', className)}\n    {...props}\n  >\n    {children}\n  </Primitive.Trigger>\n));\nNavigationMenuTrigger.displayName = Primitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ComponentRef<typeof Primitive.Content>,\n  React.ComponentPropsWithoutRef<typeof Primitive.Content>\n>(({ className, ...props }, ref) => (\n  <Primitive.Content\n    ref={ref}\n    className={cn(\n      'absolute inset-x-0 top-0 overflow-auto fd-scroll-container max-h-[80svh] data-[motion=from-end]:animate-fd-enterFromRight data-[motion=from-start]:animate-fd-enterFromLeft data-[motion=to-end]:animate-fd-exitToRight data-[motion=to-start]:animate-fd-exitToLeft',\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = Primitive.Content.displayName;\n\nconst NavigationMenuLink = Primitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ComponentRef<typeof Primitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof Primitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className=\"flex w-full justify-center\">\n    <Primitive.Viewport\n      {...props}\n      className={cn(\n        'relative h-(--radix-navigation-menu-viewport-height) w-full origin-[top_center] overflow-hidden transition-[width,height] duration-300 data-[state=closed]:animate-fd-nav-menu-out data-[state=open]:animate-fd-nav-menu-in',\n        className,\n      )}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = Primitive.Viewport.displayName;\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuViewport,\n};\n",
      "path": "components:ui/navigation-menu.tsx"
    },
    {
      "imports": {
        "@/utils/is-active": "lib:is-active.ts"
      },
      "content": "'use client';\nimport Link from 'fumadocs-core/link';\nimport { usePathname } from 'fumadocs-core/framework';\nimport {\n  type AnchorHTMLAttributes,\n  forwardRef,\n  type HTMLAttributes,\n  type ReactNode,\n} from 'react';\nimport { isActive } from '@/utils/is-active';\n\ninterface BaseItem {\n  /**\n   * Restrict where the item is displayed\n   *\n   * @defaultValue 'all'\n   */\n  on?: 'menu' | 'nav' | 'all';\n}\n\nexport interface BaseLinkType extends BaseItem {\n  url: string;\n  /**\n   * When the item is marked as active\n   *\n   * @defaultValue 'url'\n   */\n  active?: 'url' | 'nested-url' | 'none';\n  external?: boolean;\n}\n\nexport interface MainItemType extends BaseLinkType {\n  type?: 'main';\n  icon?: ReactNode;\n  text: ReactNode;\n  description?: ReactNode;\n}\n\nexport interface IconItemType extends BaseLinkType {\n  type: 'icon';\n  /**\n   * `aria-label` of icon button\n   */\n  label?: string;\n  icon: ReactNode;\n  text: ReactNode;\n  /**\n   * @defaultValue true\n   */\n  secondary?: boolean;\n}\n\ninterface ButtonItem extends BaseLinkType {\n  type: 'button';\n  icon?: ReactNode;\n  text: ReactNode;\n  /**\n   * @defaultValue false\n   */\n  secondary?: boolean;\n}\n\nexport interface MenuItemType extends BaseItem {\n  type: 'menu';\n  icon?: ReactNode;\n  text: ReactNode;\n\n  url?: string;\n  items: (\n    | (MainItemType & {\n        /**\n         * Options when displayed on navigation menu\n         */\n        menu?: HTMLAttributes<HTMLElement> & {\n          banner?: ReactNode;\n        };\n      })\n    | CustomItem\n  )[];\n\n  /**\n   * @defaultValue false\n   */\n  secondary?: boolean;\n}\n\ninterface CustomItem extends BaseItem {\n  type: 'custom';\n  /**\n   * @defaultValue false\n   */\n  secondary?: boolean;\n  children: ReactNode;\n}\n\nexport type LinkItemType =\n  | MainItemType\n  | IconItemType\n  | ButtonItem\n  | MenuItemType\n  | CustomItem;\n\nexport const BaseLinkItem = forwardRef<\n  HTMLAnchorElement,\n  Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> & { item: BaseLinkType }\n>(({ item, ...props }, ref) => {\n  const pathname = usePathname();\n  const activeType = item.active ?? 'url';\n  const active =\n    activeType !== 'none' &&\n    isActive(item.url, pathname, activeType === 'nested-url');\n\n  return (\n    <Link\n      ref={ref}\n      href={item.url}\n      external={item.external}\n      {...props}\n      data-active={active}\n    >\n      {props.children}\n    </Link>\n  );\n});\n\nBaseLinkItem.displayName = 'BaseLinkItem';\n",
      "path": "components:layouts/links.tsx"
    },
    {
      "imports": {},
      "content": "export function isActive(\n  url: string,\n  pathname: string,\n  nested = true,\n): boolean {\n  if (url.endsWith('/')) url = url.slice(0, -1);\n  if (pathname.endsWith('/')) pathname = pathname.slice(0, -1);\n\n  return url === pathname || (nested && pathname.startsWith(`${url}/`));\n}\n",
      "path": "lib:is-active.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx"
      },
      "content": "'use client';\nimport type { ComponentProps } from 'react';\nimport { Search } from 'lucide-react';\nimport { useSearchContext } from 'fumadocs-ui/contexts/search';\nimport { useI18n } from 'fumadocs-ui/contexts/i18n';\nimport { cn } from '@/utils/cn';\nimport { type ButtonProps, buttonVariants } from '@/components/ui/button';\n\ninterface SearchToggleProps\n  extends Omit<ComponentProps<'button'>, 'color'>,\n    ButtonProps {\n  hideIfDisabled?: boolean;\n}\n\nexport function SearchToggle({\n  hideIfDisabled,\n  size = 'icon-sm',\n  color = 'ghost',\n  ...props\n}: SearchToggleProps) {\n  const { setOpenSearch, enabled } = useSearchContext();\n  if (hideIfDisabled && !enabled) return null;\n\n  return (\n    <button\n      type=\"button\"\n      className={cn(\n        buttonVariants({\n          size,\n          color,\n        }),\n        props.className,\n      )}\n      data-search=\"\"\n      aria-label=\"Open Search\"\n      onClick={() => {\n        setOpenSearch(true);\n      }}\n    >\n      <Search />\n    </button>\n  );\n}\n\nexport function LargeSearchToggle({\n  hideIfDisabled,\n  ...props\n}: ComponentProps<'button'> & {\n  hideIfDisabled?: boolean;\n}) {\n  const { enabled, hotKey, setOpenSearch } = useSearchContext();\n  const { text } = useI18n();\n  if (hideIfDisabled && !enabled) return null;\n\n  return (\n    <button\n      type=\"button\"\n      data-search-full=\"\"\n      {...props}\n      className={cn(\n        'inline-flex items-center gap-2 rounded-lg border bg-fd-secondary/50 p-1.5 ps-2 text-sm text-fd-muted-foreground transition-colors hover:bg-fd-accent hover:text-fd-accent-foreground',\n        props.className,\n      )}\n      onClick={() => {\n        setOpenSearch(true);\n      }}\n    >\n      <Search className=\"size-4\" />\n      {text.search}\n      <div className=\"ms-auto inline-flex gap-0.5\">\n        {hotKey.map((k, i) => (\n          <kbd key={i} className=\"rounded-md border bg-fd-background px-1.5\">\n            {k.display}\n          </kbd>\n        ))}\n      </div>\n    </button>\n  );\n}\n",
      "path": "components:layout/search-toggle.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport { cva } from 'class-variance-authority';\nimport { Moon, Sun, Airplay } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { type HTMLAttributes, useLayoutEffect, useState } from 'react';\nimport { cn } from '@/utils/cn';\n\nconst itemVariants = cva(\n  'size-6.5 rounded-full p-1.5 text-fd-muted-foreground',\n  {\n    variants: {\n      active: {\n        true: 'bg-fd-accent text-fd-accent-foreground',\n        false: 'text-fd-muted-foreground',\n      },\n    },\n  },\n);\n\nconst full = [\n  ['light', Sun] as const,\n  ['dark', Moon] as const,\n  ['system', Airplay] as const,\n];\n\nexport function ThemeToggle({\n  className,\n  mode = 'light-dark',\n  ...props\n}: HTMLAttributes<HTMLElement> & {\n  mode?: 'light-dark' | 'light-dark-system';\n}) {\n  const { setTheme, theme, resolvedTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  useLayoutEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const container = cn(\n    'inline-flex items-center rounded-full border p-1',\n    className,\n  );\n\n  if (mode === 'light-dark') {\n    const value = mounted ? resolvedTheme : null;\n\n    return (\n      <button\n        className={container}\n        aria-label={`Toggle Theme`}\n        onClick={() => setTheme(value === 'light' ? 'dark' : 'light')}\n        data-theme-toggle=\"\"\n        {...props}\n      >\n        {full.map(([key, Icon]) => {\n          if (key === 'system') return;\n\n          return (\n            <Icon\n              key={key}\n              fill=\"currentColor\"\n              className={cn(itemVariants({ active: value === key }))}\n            />\n          );\n        })}\n      </button>\n    );\n  }\n\n  const value = mounted ? theme : null;\n\n  return (\n    <div className={container} data-theme-toggle=\"\" {...props}>\n      {full.map(([key, Icon]) => (\n        <button\n          key={key}\n          aria-label={key}\n          className={cn(itemVariants({ active: value === key }))}\n          onClick={() => setTheme(key)}\n        >\n          <Icon className=\"size-full\" fill=\"currentColor\" />\n        </button>\n      ))}\n    </div>\n  );\n}\n",
      "path": "components:layout/theme-toggle.tsx"
    },
    {
      "imports": {
        "@/layouts/links": "components:layouts/links.tsx",
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/navigation-menu": "components:ui/navigation-menu.tsx",
        "@/components/ui/button": "components:ui/button.tsx"
      },
      "content": "'use client';\nimport { BaseLinkItem, type LinkItemType } from '@/layouts/links';\nimport { cn } from '@/utils/cn';\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuTrigger,\n} from '@/components/ui/navigation-menu';\nimport Link from 'fumadocs-core/link';\nimport { cva } from 'class-variance-authority';\nimport { buttonVariants } from '@/components/ui/button';\nimport type { ComponentPropsWithoutRef } from 'react';\n\nconst menuItemVariants = cva('', {\n  variants: {\n    variant: {\n      main: 'inline-flex items-center gap-2 py-1.5 transition-colors hover:text-fd-popover-foreground/50 data-[active=true]:font-medium data-[active=true]:text-fd-primary [&_svg]:size-4',\n      icon: buttonVariants({\n        size: 'icon',\n        color: 'ghost',\n      }),\n      button: buttonVariants({\n        color: 'secondary',\n        className: 'gap-1.5 [&_svg]:size-4',\n      }),\n    },\n  },\n  defaultVariants: {\n    variant: 'main',\n  },\n});\n\nexport function MenuLinkItem({\n  item,\n  ...props\n}: {\n  item: LinkItemType;\n  className?: string;\n}) {\n  if (item.type === 'custom')\n    return <div className={cn('grid', props.className)}>{item.children}</div>;\n\n  if (item.type === 'menu') {\n    const header = (\n      <>\n        {item.icon}\n        {item.text}\n      </>\n    );\n\n    return (\n      <div className={cn('mb-4 flex flex-col', props.className)}>\n        <p className=\"mb-1 text-sm text-fd-muted-foreground\">\n          {item.url ? (\n            <NavigationMenuLink asChild>\n              <Link href={item.url}>{header}</Link>\n            </NavigationMenuLink>\n          ) : (\n            header\n          )}\n        </p>\n        {item.items.map((child, i) => (\n          <MenuLinkItem key={i} item={child} />\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <NavigationMenuLink asChild>\n      <BaseLinkItem\n        item={item}\n        className={cn(\n          menuItemVariants({ variant: item.type }),\n          props.className,\n        )}\n        aria-label={item.type === 'icon' ? item.label : undefined}\n      >\n        {item.icon}\n        {item.type === 'icon' ? undefined : item.text}\n      </BaseLinkItem>\n    </NavigationMenuLink>\n  );\n}\n\nexport const Menu = NavigationMenuItem;\n\nexport function MenuTrigger({\n  enableHover = false,\n  ...props\n}: ComponentPropsWithoutRef<typeof NavigationMenuTrigger> & {\n  /**\n   * Enable hover to trigger\n   */\n  enableHover?: boolean;\n}) {\n  return (\n    <NavigationMenuTrigger\n      {...props}\n      onPointerMove={enableHover ? undefined : (e) => e.preventDefault()}\n    >\n      {props.children}\n    </NavigationMenuTrigger>\n  );\n}\n\nexport function MenuContent(\n  props: ComponentPropsWithoutRef<typeof NavigationMenuContent>,\n) {\n  return (\n    <NavigationMenuContent\n      {...props}\n      className={cn('flex flex-col p-4', props.className)}\n    >\n      {props.children}\n    </NavigationMenuContent>\n  );\n}\n",
      "path": "components:layouts/home/menu.tsx"
    }
  ],
  "subComponents": ["layout/language-toggle", "button"],
  "dependencies": {
    "react": "",
    "fumadocs-ui": "",
    "lucide-react": "",
    "fumadocs-core": "",
    "tailwind-merge": "^3.3.1",
    "class-variance-authority": "^0.7.1",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "next-themes": "^0.4.6"
  },
  "devDependencies": {}
}
