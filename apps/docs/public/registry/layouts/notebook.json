{
  "name": "layouts/notebook",
  "files": [
    {
      "imports": {
        "@/layouts/shared": "components:layouts/shared.tsx",
        "@/components/layout/sidebar": "components:layout/sidebar.tsx",
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx",
        "@/layouts/links": "components:layouts/links.tsx",
        "@/components/layout/language-toggle": "components:layout/language-toggle.tsx",
        "@/components/layout/theme-toggle": "components:layout/theme-toggle.tsx",
        "@/components/ui/popover": "components:ui/popover.tsx",
        "@/layouts/docs/shared": "components:layouts/docs/shared.tsx",
        "./notebook-client": "components:layouts/notebook-client.tsx",
        "@/components/layout/root-toggle": "components:layout/root-toggle.tsx",
        "@/components/layout/search-toggle": "components:layout/search-toggle.tsx"
      },
      "content": "import {\n  type ComponentProps,\n  Fragment,\n  type HTMLAttributes,\n  useMemo,\n} from 'react';\nimport { type BaseLayoutProps, getLinks } from '@/layouts/shared';\nimport {\n  Sidebar,\n  SidebarCollapseTrigger,\n  SidebarContent,\n  SidebarContentMobile,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarPageTree,\n  SidebarTrigger,\n  SidebarViewport,\n} from '@/components/layout/sidebar';\nimport { TreeContextProvider } from 'fumadocs-ui/contexts/tree';\nimport { cn } from '@/utils/cn';\nimport { buttonVariants } from '@/components/ui/button';\nimport {\n  ChevronDown,\n  Languages,\n  Sidebar as SidebarIcon,\n  X,\n} from 'lucide-react';\nimport { BaseLinkItem, type LinkItemType } from '@/layouts/links';\nimport { LanguageToggle } from '@/components/layout/language-toggle';\nimport { ThemeToggle } from '@/components/layout/theme-toggle';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport {\n  getSidebarTabsFromOptions,\n  SidebarLinkItem,\n  type SidebarOptions,\n} from '@/layouts/docs/shared';\nimport type { PageTree } from 'fumadocs-core/server';\nimport {\n  LayoutBody,\n  LayoutTabs,\n  Navbar,\n  NavbarSidebarTrigger,\n} from './notebook-client';\nimport { NavProvider } from 'fumadocs-ui/contexts/layout';\nimport { type Option, RootToggle } from '@/components/layout/root-toggle';\nimport Link from 'fumadocs-core/link';\nimport {\n  LargeSearchToggle,\n  SearchToggle,\n} from '@/components/layout/search-toggle';\nimport { HideIfEmpty } from 'fumadocs-core/hide-if-empty';\n\nexport interface DocsLayoutProps extends BaseLayoutProps {\n  tree: PageTree.Root;\n  tabMode?: 'sidebar' | 'navbar';\n\n  nav?: BaseLayoutProps['nav'] & {\n    mode?: 'top' | 'auto';\n  };\n\n  sidebar?: SidebarOptions & ComponentProps<'aside'>;\n\n  containerProps?: HTMLAttributes<HTMLDivElement>;\n}\n\nexport function DocsLayout(props: DocsLayoutProps) {\n  const {\n    tabMode = 'sidebar',\n    nav: { transparentMode, ...nav } = {},\n    sidebar: { tabs: tabOptions, ...sidebarProps } = {},\n    i18n = false,\n    disableThemeSwitch = false,\n    themeSwitch = { enabled: !disableThemeSwitch },\n  } = props;\n\n  const navMode = nav.mode ?? 'auto';\n  const links = getLinks(props.links ?? [], props.githubUrl);\n  const tabs = useMemo(\n    () => getSidebarTabsFromOptions(tabOptions, props.tree) ?? [],\n    [tabOptions, props.tree],\n  );\n\n  const variables = cn(\n    '[--fd-nav-height:56px] md:[--fd-sidebar-width:286px] md:[--fd-nav-height:64px] xl:[--fd-toc-width:286px]',\n    tabs.length > 0 && tabMode === 'navbar' && 'lg:[--fd-nav-height:104px]',\n  );\n\n  function sidebar() {\n    const {\n      banner,\n      footer,\n      components,\n      collapsible = true,\n      prefetch,\n      defaultOpenLevel,\n      ...rest\n    } = sidebarProps;\n    const iconLinks = links.filter((item) => item.type === 'icon');\n\n    const rootToggle = (\n      <>\n        {tabMode === 'sidebar' && tabs.length > 0 && (\n          <RootToggle className=\"mb-2\" options={tabs} />\n        )}\n        {tabMode === 'navbar' && tabs.length > 0 && (\n          <RootToggle options={tabs} className=\"lg:hidden\" />\n        )}\n      </>\n    );\n\n    const sidebarNav = (\n      <div className=\"flex justify-between\">\n        <Link\n          href={nav.url ?? '/'}\n          className=\"inline-flex items-center gap-2.5 font-medium\"\n        >\n          {nav.title}\n        </Link>\n        {collapsible && (\n          <SidebarCollapseTrigger\n            className={cn(\n              buttonVariants({\n                color: 'ghost',\n                size: 'icon-sm',\n                className: 'mt-px mb-auto text-fd-muted-foreground',\n              }),\n            )}\n          >\n            <SidebarIcon />\n          </SidebarCollapseTrigger>\n        )}\n      </div>\n    );\n\n    const viewport = (\n      <SidebarViewport>\n        {links\n          .filter((item) => item.type !== 'icon')\n          .map((item, i, arr) => (\n            <SidebarLinkItem\n              key={i}\n              item={item}\n              className={cn('lg:hidden', i === arr.length - 1 && 'mb-4')}\n            />\n          ))}\n\n        <SidebarPageTree components={components} />\n      </SidebarViewport>\n    );\n\n    const content = (\n      <SidebarContent\n        {...rest}\n        className={cn(\n          navMode === 'top'\n            ? 'border-e-0 bg-transparent'\n            : '[--fd-nav-height:0px]',\n          rest.className,\n        )}\n      >\n        <HideIfEmpty as={SidebarHeader}>\n          {navMode === 'auto' && sidebarNav}\n          {nav.children}\n          {banner}\n          {rootToggle}\n        </HideIfEmpty>\n        {viewport}\n        <HideIfEmpty\n          as={SidebarFooter}\n          className=\"flex flex-row text-fd-muted-foreground items-center\"\n        >\n          {iconLinks.map((item, i) => (\n            <BaseLinkItem\n              key={i}\n              item={item}\n              className={cn(\n                buttonVariants({\n                  size: 'icon-sm',\n                  color: 'ghost',\n                  className: 'lg:hidden',\n                }),\n              )}\n              aria-label={item.label}\n            >\n              {item.icon}\n            </BaseLinkItem>\n          ))}\n          {footer}\n        </HideIfEmpty>\n      </SidebarContent>\n    );\n\n    const mobile = (\n      <SidebarContentMobile {...rest}>\n        <SidebarHeader>\n          <SidebarTrigger\n            className={cn(\n              buttonVariants({\n                size: 'icon-sm',\n                color: 'ghost',\n                className: 'ms-auto text-fd-muted-foreground',\n              }),\n            )}\n          >\n            <X />\n          </SidebarTrigger>\n          {banner}\n          {rootToggle}\n        </SidebarHeader>\n        {viewport}\n        <HideIfEmpty\n          as={SidebarFooter}\n          className=\"flex flex-row items-center justify-end\"\n        >\n          {iconLinks.map((item, i) => (\n            <BaseLinkItem\n              key={i}\n              item={item}\n              className={cn(\n                buttonVariants({\n                  size: 'icon-sm',\n                  color: 'ghost',\n                }),\n                'text-fd-muted-foreground lg:hidden',\n                i === iconLinks.length - 1 && 'me-auto',\n              )}\n              aria-label={item.label}\n            >\n              {item.icon}\n            </BaseLinkItem>\n          ))}\n          {i18n ? (\n            <LanguageToggle>\n              <Languages className=\"size-4.5 text-fd-muted-foreground\" />\n            </LanguageToggle>\n          ) : null}\n          {themeSwitch.enabled !== false &&\n            (themeSwitch.component ?? (\n              <ThemeToggle mode={themeSwitch.mode ?? 'light-dark-system'} />\n            ))}\n          {footer}\n        </HideIfEmpty>\n      </SidebarContentMobile>\n    );\n\n    return (\n      <Sidebar\n        defaultOpenLevel={defaultOpenLevel}\n        prefetch={prefetch}\n        Content={content}\n        Mobile={mobile}\n      />\n    );\n  }\n\n  return (\n    <TreeContextProvider tree={props.tree}>\n      <NavProvider transparentMode={transparentMode}>\n        <LayoutBody\n          {...props.containerProps}\n          className={cn(variables, props.containerProps?.className)}\n        >\n          {sidebar()}\n          <DocsNavbar\n            {...props}\n            links={links}\n            tabs={tabMode == 'navbar' ? tabs : []}\n          />\n          {props.children}\n        </LayoutBody>\n      </NavProvider>\n    </TreeContextProvider>\n  );\n}\n\nfunction DocsNavbar({\n  links,\n  tabs,\n  searchToggle = {},\n  themeSwitch = {},\n  ...props\n}: DocsLayoutProps & {\n  links: LinkItemType[];\n  tabs: Option[];\n}) {\n  const navMode = props.nav?.mode ?? 'auto';\n  const sidebarCollapsible = props.sidebar?.collapsible ?? true;\n  const nav = (\n    <Link\n      href={props.nav?.url ?? '/'}\n      className={cn(\n        'inline-flex items-center gap-2.5 font-semibold empty:hidden',\n        navMode === 'auto' && 'md:hidden',\n      )}\n    >\n      {props.nav?.title}\n    </Link>\n  );\n\n  return (\n    <Navbar mode={navMode}>\n      <div\n        className={cn(\n          'flex border-b px-4 flex-1',\n          navMode === 'auto' && 'md:px-6',\n        )}\n      >\n        <div\n          className={cn(\n            'flex flex-row items-center',\n            navMode === 'top' && 'flex-1 pe-4',\n          )}\n        >\n          {sidebarCollapsible && navMode === 'auto' ? (\n            <SidebarCollapseTrigger\n              className={cn(\n                buttonVariants({\n                  color: 'ghost',\n                  size: 'icon-sm',\n                }),\n                'text-fd-muted-foreground -ms-1.5 me-2 data-[collapsed=false]:hidden max-md:hidden',\n              )}\n            >\n              <SidebarIcon />\n            </SidebarCollapseTrigger>\n          ) : null}\n          {nav}\n        </div>\n        {searchToggle.enabled !== false &&\n          (searchToggle.components?.lg ? (\n            <div\n              className={cn(\n                'w-full my-auto max-md:hidden',\n                navMode === 'top' ? 'rounded-xl max-w-sm' : 'max-w-[240px]',\n              )}\n            >\n              {searchToggle.components?.lg}\n            </div>\n          ) : (\n            <LargeSearchToggle\n              hideIfDisabled\n              className={cn(\n                'w-full my-auto max-md:hidden',\n                navMode === 'top'\n                  ? 'rounded-xl max-w-sm ps-2.5'\n                  : 'max-w-[240px]',\n              )}\n            />\n          ))}\n        <div className=\"flex flex-1 flex-row items-center justify-end\">\n          <div className=\"flex flex-row items-center gap-6 px-4 empty:hidden max-lg:hidden\">\n            {links\n              .filter((item) => item.type !== 'icon')\n              .map((item, i) => (\n                <NavbarLinkItem\n                  key={i}\n                  item={item}\n                  className=\"text-sm text-fd-muted-foreground transition-colors hover:text-fd-accent-foreground data-[active=true]:text-fd-primary\"\n                />\n              ))}\n          </div>\n          {props.nav?.children}\n          {searchToggle.enabled !== false &&\n            (searchToggle.components?.sm ?? (\n              <SearchToggle hideIfDisabled className=\"p-2 md:hidden\" />\n            ))}\n          <NavbarSidebarTrigger className=\"p-2 -me-1.5 md:hidden\" />\n          {links\n            .filter((item) => item.type === 'icon')\n            .map((item, i) => (\n              <BaseLinkItem\n                key={i}\n                item={item}\n                className={cn(\n                  buttonVariants({ size: 'icon-sm', color: 'ghost' }),\n                  'text-fd-muted-foreground max-lg:hidden',\n                )}\n                aria-label={item.label}\n              >\n                {item.icon}\n              </BaseLinkItem>\n            ))}\n          {props.i18n ? (\n            <LanguageToggle className=\"max-md:hidden\">\n              <Languages className=\"size-4.5 text-fd-muted-foreground\" />\n            </LanguageToggle>\n          ) : null}\n          {themeSwitch.enabled !== false &&\n            (themeSwitch.component ?? (\n              <ThemeToggle\n                className=\"ms-2 max-md:hidden\"\n                mode={themeSwitch.mode ?? 'light-dark-system'}\n              />\n            ))}\n          {sidebarCollapsible && navMode === 'top' ? (\n            <SidebarCollapseTrigger\n              className={cn(\n                buttonVariants({\n                  color: 'secondary',\n                  size: 'icon-sm',\n                }),\n                'ms-2 text-fd-muted-foreground rounded-full max-md:hidden',\n              )}\n            >\n              <SidebarIcon />\n            </SidebarCollapseTrigger>\n          ) : null}\n        </div>\n      </div>\n      {tabs.length > 0 && (\n        <LayoutTabs\n          className={cn(\n            'border-b h-10 max-lg:hidden',\n            navMode === 'top' ? 'px-4' : 'px-6',\n          )}\n          options={tabs}\n        />\n      )}\n    </Navbar>\n  );\n}\n\nfunction NavbarLinkItem({\n  item,\n  ...props\n}: { item: LinkItemType } & HTMLAttributes<HTMLElement>) {\n  if (item.type === 'menu') {\n    return (\n      <Popover>\n        <PopoverTrigger\n          {...props}\n          className={cn('inline-flex items-center gap-1.5', props.className)}\n        >\n          {item.text}\n          <ChevronDown className=\"size-3\" />\n        </PopoverTrigger>\n        <PopoverContent className=\"flex flex-col\">\n          {item.items.map((child, i) => {\n            if (child.type === 'custom')\n              return <Fragment key={i}>{child.children}</Fragment>;\n\n            return (\n              <BaseLinkItem\n                key={i}\n                item={child}\n                className=\"inline-flex items-center gap-2 rounded-md p-2 text-start hover:bg-fd-accent hover:text-fd-accent-foreground data-[active=true]:text-fd-primary [&_svg]:size-4\"\n              >\n                {child.icon}\n                {child.text}\n              </BaseLinkItem>\n            );\n          })}\n        </PopoverContent>\n      </Popover>\n    );\n  }\n\n  if (item.type === 'custom') return item.children;\n\n  return (\n    <BaseLinkItem item={item} {...props}>\n      {item.text}\n    </BaseLinkItem>\n  );\n}\n\nexport { Navbar, NavbarSidebarTrigger };\n",
      "path": "components:layouts/docs.tsx"
    },
    {
      "imports": {
        "@/layouts/links": "components:layouts/links.tsx"
      },
      "content": "import type { ReactNode } from 'react';\nimport type { LinkItemType } from '@/layouts/links';\nimport type { NavProviderProps } from 'fumadocs-ui/contexts/layout';\nimport type { I18nConfig } from 'fumadocs-core/i18n';\n\nexport interface NavOptions extends NavProviderProps {\n  enabled: boolean;\n  component: ReactNode;\n\n  title?: ReactNode;\n\n  /**\n   * Redirect url of title\n   * @defaultValue '/'\n   */\n  url?: string;\n\n  children?: ReactNode;\n}\n\nexport interface BaseLayoutProps {\n  themeSwitch?: {\n    enabled?: boolean;\n    component?: ReactNode;\n    mode?: 'light-dark' | 'light-dark-system';\n  };\n\n  searchToggle?: Partial<{\n    enabled: boolean;\n    components: Partial<{\n      sm: ReactNode;\n      lg: ReactNode;\n    }>;\n  }>;\n\n  /**\n   * Remove theme switcher component\n   *\n   * @deprecated Use `themeSwitch.enabled` instead.\n   */\n  disableThemeSwitch?: boolean;\n\n  /**\n   * I18n options\n   *\n   * @defaultValue false\n   */\n  i18n?: boolean | I18nConfig;\n\n  /**\n   * GitHub url\n   */\n  githubUrl?: string;\n\n  links?: LinkItemType[];\n  /**\n   * Replace or disable navbar\n   */\n  nav?: Partial<NavOptions>;\n\n  children?: ReactNode;\n}\n\nexport { type LinkItemType };\n\n/**\n * Get Links Items with shortcuts\n */\nexport function getLinks(\n  links: LinkItemType[] = [],\n  githubUrl?: string,\n): LinkItemType[] {\n  let result = links ?? [];\n\n  if (githubUrl)\n    result = [\n      ...result,\n      {\n        type: 'icon',\n        url: githubUrl,\n        text: 'Github',\n        label: 'GitHub',\n        icon: (\n          <svg role=\"img\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n          </svg>\n        ),\n        external: true,\n      },\n    ];\n\n  return result;\n}\n",
      "path": "components:layouts/shared.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/scroll-area": "components:ui/scroll-area.tsx",
        "@/utils/is-active": "lib:is-active.ts",
        "@/components/ui/collapsible": "components:ui/collapsible.tsx"
      },
      "content": "'use client';\nimport { ChevronDown, ExternalLink } from 'lucide-react';\nimport { usePathname } from 'fumadocs-core/framework';\nimport {\n  type ComponentProps,\n  createContext,\n  type FC,\n  Fragment,\n  type ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport Link, { type LinkProps } from 'fumadocs-core/link';\nimport { useOnChange } from 'fumadocs-core/utils/use-on-change';\nimport { cn } from '@/utils/cn';\nimport { ScrollArea, ScrollViewport } from '@/components/ui/scroll-area';\nimport { isActive } from '@/utils/is-active';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible';\nimport { type ScrollAreaProps } from '@radix-ui/react-scroll-area';\nimport { useSidebar } from 'fumadocs-ui/contexts/sidebar';\nimport { cva } from 'class-variance-authority';\nimport type {\n  CollapsibleContentProps,\n  CollapsibleTriggerProps,\n} from '@radix-ui/react-collapsible';\nimport type { PageTree } from 'fumadocs-core/server';\nimport { useTreeContext, useTreePath } from 'fumadocs-ui/contexts/tree';\nimport { useMediaQuery } from 'fumadocs-core/utils/use-media-query';\nimport { Presence } from '@radix-ui/react-presence';\n\nexport interface SidebarProps {\n  /**\n   * Open folders by default if their level is lower or equal to a specific level\n   * (Starting from 1)\n   *\n   * @defaultValue 0\n   */\n  defaultOpenLevel?: number;\n\n  /**\n   * Prefetch links\n   *\n   * @defaultValue true\n   */\n  prefetch?: boolean;\n\n  /**\n   * Children to render\n   */\n  Content: ReactNode;\n\n  /**\n   * Alternative children for mobile\n   */\n  Mobile?: ReactNode;\n}\n\ninterface InternalContext {\n  defaultOpenLevel: number;\n  prefetch: boolean;\n  level: number;\n}\n\nconst itemVariants = cva(\n  'relative flex flex-row items-center gap-2 rounded-xl p-2 ps-(--sidebar-item-offset) text-start text-fd-muted-foreground [overflow-wrap:anywhere] [&_svg]:size-4 [&_svg]:shrink-0',\n  {\n    variants: {\n      active: {\n        true: 'bg-fd-primary/10 text-fd-primary',\n        false:\n          'transition-colors hover:bg-fd-accent/50 hover:text-fd-accent-foreground/80 hover:transition-none',\n      },\n    },\n  },\n);\n\nconst Context = createContext<InternalContext | null>(null);\nconst FolderContext = createContext<{\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n} | null>(null);\n\nexport function Sidebar({\n  defaultOpenLevel = 0,\n  prefetch = true,\n  Mobile,\n  Content,\n}: SidebarProps) {\n  const isMobile = useMediaQuery('(width < 768px)') ?? false;\n  const context = useMemo<InternalContext>(() => {\n    return {\n      defaultOpenLevel,\n      prefetch,\n      level: 1,\n    };\n  }, [defaultOpenLevel, prefetch]);\n\n  return (\n    <Context.Provider value={context}>\n      {isMobile && Mobile != null ? Mobile : Content}\n    </Context.Provider>\n  );\n}\n\nexport function SidebarContent(props: ComponentProps<'aside'>) {\n  const { collapsed } = useSidebar();\n  const [hover, setHover] = useState(false);\n  const timerRef = useRef(0);\n  const closeTimeRef = useRef(0);\n\n  useOnChange(collapsed, () => {\n    setHover(false);\n    closeTimeRef.current = Date.now() + 150;\n  });\n\n  return (\n    <aside\n      id=\"nd-sidebar\"\n      {...props}\n      data-collapsed={collapsed}\n      className={cn(\n        'fixed start-0 flex flex-col items-end top-(--fd-sidebar-top) bottom-(--fd-sidebar-margin) z-20 bg-fd-card text-sm border-e max-md:hidden *:w-(--fd-sidebar-width)',\n        collapsed && [\n          'rounded-xl border translate-x-(--fd-sidebar-offset) rtl:-translate-x-(--fd-sidebar-offset)',\n          hover ? 'z-50 shadow-lg' : 'opacity-0',\n        ],\n        props.className,\n      )}\n      style={\n        {\n          transition: ['top', 'opacity', 'translate', 'width']\n            .map((v) => `${v} ease 250ms`)\n            .join(', '),\n          ...props.style,\n          '--fd-sidebar-offset': hover\n            ? 'calc(var(--spacing) * 2)'\n            : 'calc(16px - 100%)',\n          '--fd-sidebar-margin': collapsed ? '0.5rem' : '0px',\n          '--fd-sidebar-top': `calc(var(--fd-banner-height) + var(--fd-nav-height) + var(--fd-sidebar-margin))`,\n          width: collapsed\n            ? 'var(--fd-sidebar-width)'\n            : 'calc(var(--fd-sidebar-width) + var(--fd-layout-offset))',\n        } as object\n      }\n      onPointerEnter={(e) => {\n        if (\n          !collapsed ||\n          e.pointerType === 'touch' ||\n          closeTimeRef.current > Date.now()\n        )\n          return;\n        window.clearTimeout(timerRef.current);\n        setHover(true);\n      }}\n      onPointerLeave={(e) => {\n        if (!collapsed || e.pointerType === 'touch') return;\n        window.clearTimeout(timerRef.current);\n\n        timerRef.current = window.setTimeout(\n          () => {\n            setHover(false);\n            closeTimeRef.current = Date.now() + 150;\n          },\n          Math.min(e.clientX, document.body.clientWidth - e.clientX) > 100\n            ? 0\n            : 500,\n        );\n      }}\n    >\n      {props.children}\n    </aside>\n  );\n}\n\nexport function SidebarContentMobile({\n  className,\n  children,\n  ...props\n}: ComponentProps<'aside'>) {\n  const { open, setOpen } = useSidebar();\n  const state = open ? 'open' : 'closed';\n\n  return (\n    <>\n      <Presence present={open}>\n        <div\n          data-state={state}\n          className=\"fixed z-40 inset-0 backdrop-blur-xs data-[state=open]:animate-fd-fade-in data-[state=closed]:animate-fd-fade-out\"\n          onClick={() => setOpen(false)}\n        />\n      </Presence>\n      <Presence present={open}>\n        {({ present }) => (\n          <aside\n            id=\"nd-sidebar-mobile\"\n            {...props}\n            data-state={state}\n            className={cn(\n              'fixed text-[15px] flex flex-col shadow-lg border-s end-0 inset-y-0 w-[85%] max-w-[380px] z-40 bg-fd-background data-[state=open]:animate-fd-sidebar-in data-[state=closed]:animate-fd-sidebar-out',\n              !present && 'invisible',\n              className,\n            )}\n          >\n            {children}\n          </aside>\n        )}\n      </Presence>\n    </>\n  );\n}\n\nexport function SidebarHeader(props: ComponentProps<'div'>) {\n  return (\n    <div\n      {...props}\n      className={cn('flex flex-col gap-3 p-4 pb-2', props.className)}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport function SidebarFooter(props: ComponentProps<'div'>) {\n  return (\n    <div\n      {...props}\n      className={cn('flex flex-col border-t px-4 py-3', props.className)}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport function SidebarViewport(props: ScrollAreaProps) {\n  return (\n    <ScrollArea {...props} className={cn('h-full', props.className)}>\n      <ScrollViewport\n        className=\"p-4\"\n        style={\n          {\n            '--sidebar-item-offset': 'calc(var(--spacing) * 2)',\n            maskImage:\n              'linear-gradient(to bottom, transparent, white 12px, white calc(100% - 12px), transparent)',\n          } as object\n        }\n      >\n        {props.children}\n      </ScrollViewport>\n    </ScrollArea>\n  );\n}\n\nexport function SidebarSeparator(props: ComponentProps<'p'>) {\n  return (\n    <p\n      {...props}\n      className={cn(\n        'inline-flex items-center gap-2 mb-1.5 px-2 ps-(--sidebar-item-offset) empty:mb-0 [&_svg]:size-4 [&_svg]:shrink-0',\n        props.className,\n      )}\n    >\n      {props.children}\n    </p>\n  );\n}\n\nexport function SidebarItem({\n  icon,\n  ...props\n}: LinkProps & {\n  icon?: ReactNode;\n}) {\n  const pathname = usePathname();\n  const active =\n    props.href !== undefined && isActive(props.href, pathname, false);\n  const { prefetch } = useInternalContext();\n\n  return (\n    <Link\n      {...props}\n      data-active={active}\n      className={cn(itemVariants({ active }), props.className)}\n      prefetch={prefetch}\n    >\n      {icon ?? (props.external ? <ExternalLink /> : null)}\n      {props.children}\n    </Link>\n  );\n}\n\nexport function SidebarFolder({\n  defaultOpen = false,\n  ...props\n}: ComponentProps<'div'> & {\n  defaultOpen?: boolean;\n}) {\n  const [open, setOpen] = useState(defaultOpen);\n\n  useOnChange(defaultOpen, (v) => {\n    if (v) setOpen(v);\n  });\n\n  return (\n    <Collapsible open={open} onOpenChange={setOpen} {...props}>\n      <FolderContext.Provider\n        value={useMemo(() => ({ open, setOpen }), [open])}\n      >\n        {props.children}\n      </FolderContext.Provider>\n    </Collapsible>\n  );\n}\n\nexport function SidebarFolderTrigger({\n  className,\n  ...props\n}: CollapsibleTriggerProps) {\n  const { open } = useFolderContext();\n\n  return (\n    <CollapsibleTrigger\n      className={cn(itemVariants({ active: false }), 'w-full', className)}\n      {...props}\n    >\n      {props.children}\n      <ChevronDown\n        data-icon\n        className={cn('ms-auto transition-transform', !open && '-rotate-90')}\n      />\n    </CollapsibleTrigger>\n  );\n}\n\nexport function SidebarFolderLink(props: LinkProps) {\n  const { open, setOpen } = useFolderContext();\n  const { prefetch } = useInternalContext();\n\n  const pathname = usePathname();\n  const active =\n    props.href !== undefined && isActive(props.href, pathname, false);\n\n  return (\n    <Link\n      {...props}\n      data-active={active}\n      className={cn(itemVariants({ active }), 'w-full', props.className)}\n      onClick={(e) => {\n        if (\n          e.target instanceof HTMLElement &&\n          e.target.hasAttribute('data-icon')\n        ) {\n          setOpen(!open);\n          e.preventDefault();\n        } else {\n          setOpen(active ? !open : true);\n        }\n      }}\n      prefetch={prefetch}\n    >\n      {props.children}\n      <ChevronDown\n        data-icon\n        className={cn('ms-auto transition-transform', !open && '-rotate-90')}\n      />\n    </Link>\n  );\n}\n\nexport function SidebarFolderContent(props: CollapsibleContentProps) {\n  const ctx = useInternalContext();\n  const level = ctx.level + 1;\n\n  return (\n    <CollapsibleContent\n      {...props}\n      className={cn(\n        'relative',\n        level === 2 &&\n          \"**:data-[active=true]:before:content-[''] **:data-[active=true]:before:bg-fd-primary **:data-[active=true]:before:absolute **:data-[active=true]:before:w-px **:data-[active=true]:before:inset-y-2.5 **:data-[active=true]:before:start-2.5\",\n        props.className,\n      )}\n      style={\n        {\n          '--sidebar-item-offset': `calc(var(--spacing) * ${level > 1 ? level * 3 : 2})`,\n          ...props.style,\n        } as object\n      }\n    >\n      {level === 2 && (\n        <div className=\"absolute w-px inset-y-1 bg-fd-border start-2.5\" />\n      )}\n      <Context.Provider\n        value={useMemo(\n          () => ({\n            ...ctx,\n            level,\n          }),\n          [ctx, level],\n        )}\n      >\n        {props.children}\n      </Context.Provider>\n    </CollapsibleContent>\n  );\n}\n\nexport function SidebarTrigger({\n  children,\n  ...props\n}: ComponentProps<'button'>) {\n  const { setOpen } = useSidebar();\n\n  return (\n    <button\n      {...props}\n      aria-label=\"Open Sidebar\"\n      onClick={() => setOpen((prev) => !prev)}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function SidebarCollapseTrigger(props: ComponentProps<'button'>) {\n  const { collapsed, setCollapsed } = useSidebar();\n\n  return (\n    <button\n      type=\"button\"\n      aria-label=\"Collapse Sidebar\"\n      data-collapsed={collapsed}\n      {...props}\n      onClick={() => {\n        setCollapsed((prev) => !prev);\n      }}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nfunction useFolderContext() {\n  const ctx = useContext(FolderContext);\n  if (!ctx) throw new Error('Missing sidebar folder');\n\n  return ctx;\n}\n\nfunction useInternalContext() {\n  const ctx = useContext(Context);\n  if (!ctx) throw new Error('<Sidebar /> component required.');\n\n  return ctx;\n}\n\nexport interface SidebarComponents {\n  Item: FC<{ item: PageTree.Item }>;\n  Folder: FC<{ item: PageTree.Folder; level: number; children: ReactNode }>;\n  Separator: FC<{ item: PageTree.Separator }>;\n}\n\n/**\n * Render sidebar items from page tree\n */\nexport function SidebarPageTree(props: {\n  components?: Partial<SidebarComponents>;\n}) {\n  const { root } = useTreeContext();\n\n  return useMemo(() => {\n    const { Separator, Item, Folder } = props.components ?? {};\n\n    function renderSidebarList(\n      items: PageTree.Node[],\n      level: number,\n    ): ReactNode[] {\n      return items.map((item, i) => {\n        if (item.type === 'separator') {\n          if (Separator) return <Separator key={i} item={item} />;\n          return (\n            <SidebarSeparator key={i} className={cn(i !== 0 && 'mt-6')}>\n              {item.icon}\n              {item.name}\n            </SidebarSeparator>\n          );\n        }\n\n        if (item.type === 'folder') {\n          const children = renderSidebarList(item.children, level + 1);\n\n          if (Folder)\n            return (\n              <Folder key={i} item={item} level={level}>\n                {children}\n              </Folder>\n            );\n          return (\n            <PageTreeFolder key={i} item={item}>\n              {children}\n            </PageTreeFolder>\n          );\n        }\n\n        if (Item) return <Item key={item.url} item={item} />;\n        return (\n          <SidebarItem\n            key={item.url}\n            href={item.url}\n            external={item.external}\n            icon={item.icon}\n          >\n            {item.name}\n          </SidebarItem>\n        );\n      });\n    }\n\n    return (\n      <Fragment key={root.$id}>{renderSidebarList(root.children, 1)}</Fragment>\n    );\n  }, [props.components, root]);\n}\n\nfunction PageTreeFolder({\n  item,\n  ...props\n}: {\n  item: PageTree.Folder;\n  children: ReactNode;\n}) {\n  const { defaultOpenLevel, level } = useInternalContext();\n  const path = useTreePath();\n\n  return (\n    <SidebarFolder\n      defaultOpen={\n        (item.defaultOpen ?? defaultOpenLevel >= level) || path.includes(item)\n      }\n    >\n      {item.index ? (\n        <SidebarFolderLink\n          href={item.index.url}\n          external={item.index.external}\n          {...props}\n        >\n          {item.icon}\n          {item.name}\n        </SidebarFolderLink>\n      ) : (\n        <SidebarFolderTrigger {...props}>\n          {item.icon}\n          {item.name}\n        </SidebarFolderTrigger>\n      )}\n      <SidebarFolderContent>{props.children}</SidebarFolderContent>\n    </SidebarFolder>\n  );\n}\n",
      "path": "components:layout/sidebar.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst ScrollArea = React.forwardRef<\n  React.ComponentRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    type=\"scroll\"\n    className={cn('overflow-hidden', className)}\n    {...props}\n  >\n    {children}\n    <ScrollAreaPrimitive.Corner />\n    <ScrollBar orientation=\"vertical\" />\n  </ScrollAreaPrimitive.Root>\n));\n\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollViewport = React.forwardRef<\n  React.ComponentRef<typeof ScrollAreaPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Viewport>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Viewport\n    ref={ref}\n    className={cn('size-full rounded-[inherit]', className)}\n    {...props}\n  >\n    {children}\n  </ScrollAreaPrimitive.Viewport>\n));\n\nScrollViewport.displayName = ScrollAreaPrimitive.Viewport.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ComponentRef<typeof ScrollAreaPrimitive.Scrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Scrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.Scrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex select-none data-[state=hidden]:animate-fd-fade-out',\n      orientation === 'vertical' && 'h-full w-1.5',\n      orientation === 'horizontal' && 'h-1.5 flex-col',\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-fd-border\" />\n  </ScrollAreaPrimitive.Scrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.Scrollbar.displayName;\n\nexport { ScrollArea, ScrollBar, ScrollViewport };\n",
      "path": "components:ui/scroll-area.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { forwardRef, useEffect, useState } from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Collapsible = CollapsiblePrimitive.Root;\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\n\nconst CollapsibleContent = forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.CollapsibleContent>\n>(({ children, ...props }, ref) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      ref={ref}\n      {...props}\n      className={cn(\n        'overflow-hidden',\n        mounted &&\n          'data-[state=closed]:animate-fd-collapsible-up data-[state=open]:animate-fd-collapsible-down',\n        props.className,\n      )}\n    >\n      {children}\n    </CollapsiblePrimitive.CollapsibleContent>\n  );\n});\n\nCollapsibleContent.displayName =\n  CollapsiblePrimitive.CollapsibleContent.displayName;\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
      "path": "components:ui/collapsible.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/is-active": "lib:is-active.ts"
      },
      "content": "'use client';\nimport Link from 'fumadocs-core/link';\nimport { usePathname } from 'fumadocs-core/framework';\nimport {\n  type AnchorHTMLAttributes,\n  forwardRef,\n  type HTMLAttributes,\n  type ReactNode,\n} from 'react';\nimport { isActive } from '@/utils/is-active';\n\ninterface BaseItem {\n  /**\n   * Restrict where the item is displayed\n   *\n   * @defaultValue 'all'\n   */\n  on?: 'menu' | 'nav' | 'all';\n}\n\nexport interface BaseLinkType extends BaseItem {\n  url: string;\n  /**\n   * When the item is marked as active\n   *\n   * @defaultValue 'url'\n   */\n  active?: 'url' | 'nested-url' | 'none';\n  external?: boolean;\n}\n\nexport interface MainItemType extends BaseLinkType {\n  type?: 'main';\n  icon?: ReactNode;\n  text: ReactNode;\n  description?: ReactNode;\n}\n\nexport interface IconItemType extends BaseLinkType {\n  type: 'icon';\n  /**\n   * `aria-label` of icon button\n   */\n  label?: string;\n  icon: ReactNode;\n  text: ReactNode;\n  /**\n   * @defaultValue true\n   */\n  secondary?: boolean;\n}\n\ninterface ButtonItem extends BaseLinkType {\n  type: 'button';\n  icon?: ReactNode;\n  text: ReactNode;\n  /**\n   * @defaultValue false\n   */\n  secondary?: boolean;\n}\n\nexport interface MenuItemType extends BaseItem {\n  type: 'menu';\n  icon?: ReactNode;\n  text: ReactNode;\n\n  url?: string;\n  items: (\n    | (MainItemType & {\n        /**\n         * Options when displayed on navigation menu\n         */\n        menu?: HTMLAttributes<HTMLElement> & {\n          banner?: ReactNode;\n        };\n      })\n    | CustomItem\n  )[];\n\n  /**\n   * @defaultValue false\n   */\n  secondary?: boolean;\n}\n\ninterface CustomItem extends BaseItem {\n  type: 'custom';\n  /**\n   * @defaultValue false\n   */\n  secondary?: boolean;\n  children: ReactNode;\n}\n\nexport type LinkItemType =\n  | MainItemType\n  | IconItemType\n  | ButtonItem\n  | MenuItemType\n  | CustomItem;\n\nexport const BaseLinkItem = forwardRef<\n  HTMLAnchorElement,\n  Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> & { item: BaseLinkType }\n>(({ item, ...props }, ref) => {\n  const pathname = usePathname();\n  const activeType = item.active ?? 'url';\n  const active =\n    activeType !== 'none' &&\n    isActive(item.url, pathname, activeType === 'nested-url');\n\n  return (\n    <Link\n      ref={ref}\n      href={item.url}\n      external={item.external}\n      {...props}\n      data-active={active}\n    >\n      {props.children}\n    </Link>\n  );\n});\n\nBaseLinkItem.displayName = 'BaseLinkItem';\n",
      "path": "components:layouts/links.tsx"
    },
    {
      "imports": {},
      "content": "export function isActive(\n  url: string,\n  pathname: string,\n  nested = true,\n): boolean {\n  if (url.endsWith('/')) url = url.slice(0, -1);\n  if (pathname.endsWith('/')) pathname = pathname.slice(0, -1);\n\n  return url === pathname || (nested && pathname.startsWith(`${url}/`));\n}\n",
      "path": "lib:is-active.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport { cva } from 'class-variance-authority';\nimport { Moon, Sun, Airplay } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { type HTMLAttributes, useLayoutEffect, useState } from 'react';\nimport { cn } from '@/utils/cn';\n\nconst itemVariants = cva(\n  'size-6.5 rounded-full p-1.5 text-fd-muted-foreground',\n  {\n    variants: {\n      active: {\n        true: 'bg-fd-accent text-fd-accent-foreground',\n        false: 'text-fd-muted-foreground',\n      },\n    },\n  },\n);\n\nconst full = [\n  ['light', Sun] as const,\n  ['dark', Moon] as const,\n  ['system', Airplay] as const,\n];\n\nexport function ThemeToggle({\n  className,\n  mode = 'light-dark',\n  ...props\n}: HTMLAttributes<HTMLElement> & {\n  mode?: 'light-dark' | 'light-dark-system';\n}) {\n  const { setTheme, theme, resolvedTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  useLayoutEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const container = cn(\n    'inline-flex items-center rounded-full border p-1',\n    className,\n  );\n\n  if (mode === 'light-dark') {\n    const value = mounted ? resolvedTheme : null;\n\n    return (\n      <button\n        className={container}\n        aria-label={`Toggle Theme`}\n        onClick={() => setTheme(value === 'light' ? 'dark' : 'light')}\n        data-theme-toggle=\"\"\n        {...props}\n      >\n        {full.map(([key, Icon]) => {\n          if (key === 'system') return;\n\n          return (\n            <Icon\n              key={key}\n              fill=\"currentColor\"\n              className={cn(itemVariants({ active: value === key }))}\n            />\n          );\n        })}\n      </button>\n    );\n  }\n\n  const value = mounted ? theme : null;\n\n  return (\n    <div className={container} data-theme-toggle=\"\" {...props}>\n      {full.map(([key, Icon]) => (\n        <button\n          key={key}\n          aria-label={key}\n          className={cn(itemVariants({ active: value === key }))}\n          onClick={() => setTheme(key)}\n        >\n          <Icon className=\"size-full\" fill=\"currentColor\" />\n        </button>\n      ))}\n    </div>\n  );\n}\n",
      "path": "components:layout/theme-toggle.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ComponentRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      side=\"bottom\"\n      className={cn(\n        'z-50 origin-(--radix-popover-content-transform-origin) min-w-[240px] max-w-[98vw] rounded-xl border bg-fd-popover/60 backdrop-blur-lg p-2 text-sm text-fd-popover-foreground shadow-lg focus-visible:outline-none data-[state=closed]:animate-fd-popover-out data-[state=open]:animate-fd-popover-in',\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nconst PopoverClose = PopoverPrimitive.PopoverClose;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverClose };\n",
      "path": "components:ui/popover.tsx"
    },
    {
      "imports": {
        "@/layouts/links": "components:layouts/links.tsx",
        "@/components/layout/sidebar": "components:layout/sidebar.tsx",
        "@/components/layout/root-toggle": "components:layout/root-toggle.tsx"
      },
      "content": "import type { LinkItemType } from '@/layouts/links';\nimport {\n  type SidebarComponents,\n  SidebarFolder,\n  SidebarFolderContent,\n  SidebarFolderLink,\n  SidebarFolderTrigger,\n  SidebarItem,\n  type SidebarProps,\n} from '@/components/layout/sidebar';\nimport type { PageTree } from 'fumadocs-core/server';\nimport type { ReactNode } from 'react';\nimport type { Option } from '@/components/layout/root-toggle';\nimport {\n  getSidebarTabs,\n  type GetSidebarTabsOptions,\n} from 'fumadocs-ui/utils/get-sidebar-tabs';\n\nexport interface SidebarOptions\n  extends Pick<SidebarProps, 'defaultOpenLevel' | 'prefetch'> {\n  components?: Partial<SidebarComponents>;\n\n  /**\n   * Root Toggle options\n   */\n  tabs?: Option[] | GetSidebarTabsOptions | false;\n\n  banner?: ReactNode;\n  footer?: ReactNode;\n\n  /**\n   * Support collapsing the sidebar on desktop mode\n   *\n   * @defaultValue true\n   */\n  collapsible?: boolean;\n}\n\nexport function SidebarLinkItem({\n  item,\n  ...props\n}: {\n  item: LinkItemType;\n  className?: string;\n}) {\n  if (item.type === 'menu')\n    return (\n      <SidebarFolder {...props}>\n        {item.url ? (\n          <SidebarFolderLink href={item.url}>\n            {item.icon}\n            {item.text}\n          </SidebarFolderLink>\n        ) : (\n          <SidebarFolderTrigger>\n            {item.icon}\n            {item.text}\n          </SidebarFolderTrigger>\n        )}\n        <SidebarFolderContent>\n          {item.items.map((child, i) => (\n            <SidebarLinkItem key={i} item={child} />\n          ))}\n        </SidebarFolderContent>\n      </SidebarFolder>\n    );\n\n  if (item.type === 'custom') return <div {...props}>{item.children}</div>;\n\n  return (\n    <SidebarItem\n      href={item.url}\n      icon={item.icon}\n      external={item.external}\n      {...props}\n    >\n      {item.text}\n    </SidebarItem>\n  );\n}\n\nexport function getSidebarTabsFromOptions(\n  options: SidebarOptions['tabs'],\n  tree: PageTree.Root,\n) {\n  if (Array.isArray(options)) {\n    return options;\n  } else if (typeof options === 'object') {\n    return getSidebarTabs(tree, options);\n  } else if (options !== false) {\n    return getSidebarTabs(tree);\n  }\n}\n",
      "path": "components:layouts/docs/shared.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx",
        "@/utils/is-active": "lib:is-active.ts",
        "@/components/layout/root-toggle": "components:layout/root-toggle.tsx"
      },
      "content": "'use client';\nimport { cn } from '@/utils/cn';\nimport { type ComponentProps, useMemo } from 'react';\nimport { useSidebar } from 'fumadocs-ui/contexts/sidebar';\nimport { useNav } from 'fumadocs-ui/contexts/layout';\nimport { buttonVariants } from '@/components/ui/button';\nimport { Sidebar as SidebarIcon } from 'lucide-react';\nimport Link from 'fumadocs-core/link';\nimport { usePathname } from 'fumadocs-core/framework';\nimport { isActive } from '@/utils/is-active';\nimport type { Option } from '@/components/layout/root-toggle';\n\nexport function Navbar({\n  mode,\n  ...props\n}: ComponentProps<'header'> & { mode: 'top' | 'auto' }) {\n  const { open, collapsed } = useSidebar();\n  const { isTransparent } = useNav();\n\n  return (\n    <header\n      id=\"nd-subnav\"\n      {...props}\n      className={cn(\n        'fixed flex flex-col inset-x-0 top-(--fd-banner-height) z-10 px-(--fd-layout-offset) h-(--fd-nav-height) backdrop-blur-sm transition-colors',\n        (!isTransparent || open) && 'bg-fd-background/80',\n        mode === 'auto' &&\n          !collapsed &&\n          'ps-[calc(var(--fd-layout-offset)+var(--fd-sidebar-width))]',\n        props.className,\n      )}\n    >\n      {props.children}\n    </header>\n  );\n}\n\nexport function LayoutBody(props: ComponentProps<'main'>) {\n  const { collapsed } = useSidebar();\n\n  return (\n    <main\n      id=\"nd-docs-layout\"\n      {...props}\n      className={cn(\n        'flex flex-1 flex-col transition-[padding] pt-(--fd-nav-height) fd-notebook-layout',\n        props.className,\n      )}\n      style={{\n        ...props.style,\n        paddingInlineStart: collapsed\n          ? 'min(calc(100vw - var(--fd-page-width)), var(--fd-sidebar-width))'\n          : 'calc(var(--fd-sidebar-width) + var(--fd-layout-offset))',\n        paddingInlineEnd: collapsed ? '0px' : 'var(--fd-layout-offset)',\n      }}\n    >\n      {props.children}\n    </main>\n  );\n}\n\nexport function NavbarSidebarTrigger({\n  className,\n  ...props\n}: ComponentProps<'button'>) {\n  const { setOpen } = useSidebar();\n\n  return (\n    <button\n      {...props}\n      className={cn(\n        buttonVariants({\n          color: 'ghost',\n          size: 'icon-sm',\n          className,\n        }),\n      )}\n      onClick={() => setOpen((prev) => !prev)}\n    >\n      <SidebarIcon />\n    </button>\n  );\n}\n\nexport function LayoutTabs({\n  options,\n  ...props\n}: ComponentProps<'div'> & {\n  options: Option[];\n}) {\n  const pathname = usePathname();\n  const selected = useMemo(() => {\n    const url = pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;\n\n    return options.findLast((option) => {\n      if (option.urls) {\n        return option.urls.has(url);\n      }\n\n      return isActive(option.url, pathname, true);\n    });\n  }, [options, pathname]);\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        'flex flex-row items-center gap-2 overflow-auto',\n        props.className,\n      )}\n    >\n      {options.map((option) => (\n        <LayoutTab\n          key={option.url}\n          selected={selected === option}\n          option={option}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction LayoutTab({\n  option,\n  selected = false,\n}: {\n  option: Option;\n  selected?: boolean;\n}) {\n  return (\n    <Link\n      className={cn(\n        'inline-flex rounded-full items-center px-2 py-1.5 font-medium gap-2 text-fd-muted-foreground text-sm text-nowrap',\n        selected && 'bg-fd-primary/10 text-fd-primary',\n      )}\n      href={option.url}\n    >\n      {option.title}\n    </Link>\n  );\n}\n",
      "path": "components:layouts/notebook-client.tsx"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/button": "components:ui/button.tsx"
      },
      "content": "'use client';\nimport type { ComponentProps } from 'react';\nimport { Search } from 'lucide-react';\nimport { useSearchContext } from 'fumadocs-ui/contexts/search';\nimport { useI18n } from 'fumadocs-ui/contexts/i18n';\nimport { cn } from '@/utils/cn';\nimport { type ButtonProps, buttonVariants } from '@/components/ui/button';\n\ninterface SearchToggleProps\n  extends Omit<ComponentProps<'button'>, 'color'>,\n    ButtonProps {\n  hideIfDisabled?: boolean;\n}\n\nexport function SearchToggle({\n  hideIfDisabled,\n  size = 'icon-sm',\n  color = 'ghost',\n  ...props\n}: SearchToggleProps) {\n  const { setOpenSearch, enabled } = useSearchContext();\n  if (hideIfDisabled && !enabled) return null;\n\n  return (\n    <button\n      type=\"button\"\n      className={cn(\n        buttonVariants({\n          size,\n          color,\n        }),\n        props.className,\n      )}\n      data-search=\"\"\n      aria-label=\"Open Search\"\n      onClick={() => {\n        setOpenSearch(true);\n      }}\n    >\n      <Search />\n    </button>\n  );\n}\n\nexport function LargeSearchToggle({\n  hideIfDisabled,\n  ...props\n}: ComponentProps<'button'> & {\n  hideIfDisabled?: boolean;\n}) {\n  const { enabled, hotKey, setOpenSearch } = useSearchContext();\n  const { text } = useI18n();\n  if (hideIfDisabled && !enabled) return null;\n\n  return (\n    <button\n      type=\"button\"\n      data-search-full=\"\"\n      {...props}\n      className={cn(\n        'inline-flex items-center gap-2 rounded-lg border bg-fd-secondary/50 p-1.5 ps-2 text-sm text-fd-muted-foreground transition-colors hover:bg-fd-accent hover:text-fd-accent-foreground',\n        props.className,\n      )}\n      onClick={() => {\n        setOpenSearch(true);\n      }}\n    >\n      <Search className=\"size-4\" />\n      {text.search}\n      <div className=\"ms-auto inline-flex gap-0.5\">\n        {hotKey.map((k, i) => (\n          <kbd key={i} className=\"rounded-md border bg-fd-background px-1.5\">\n            {k.display}\n          </kbd>\n        ))}\n      </div>\n    </button>\n  );\n}\n",
      "path": "components:layout/search-toggle.tsx"
    }
  ],
  "subComponents": ["button", "layout/language-toggle", "layout/root-toggle"],
  "dependencies": {
    "react": "",
    "fumadocs-ui": "",
    "lucide-react": "",
    "fumadocs-core": "",
    "tailwind-merge": "^3.3.1",
    "class-variance-authority": "^0.7.1",
    "next-themes": "^0.4.6",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-presence": "^1.1.4"
  },
  "devDependencies": {}
}
