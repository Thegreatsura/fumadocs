{
  "name": "github-info",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import { cn } from '@/utils/cn';\nimport { Star } from 'lucide-react';\nimport { type AnchorHTMLAttributes } from 'react';\n\nasync function getRepoStarsAndForks(\n  owner: string,\n  repo: string,\n  token?: string,\n): Promise<{\n  stars: number;\n  forks: number;\n}> {\n  const endpoint = `https://api.github.com/repos/${owner}/${repo}`;\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n  });\n\n  if (token) headers.set('Authorization', `Bearer ${token}`);\n\n  const response = await fetch(endpoint, {\n    headers,\n    next: {\n      revalidate: 60,\n    },\n  });\n\n  if (!response.ok) {\n    const message = await response.text();\n\n    throw new Error(`Failed to fetch repository data: ${message}`);\n  }\n\n  const data = await response.json();\n  return {\n    stars: data.stargazers_count,\n    forks: data.forks_count,\n  };\n}\n\nexport async function GithubInfo({\n  repo,\n  owner,\n  token,\n  ...props\n}: AnchorHTMLAttributes<HTMLAnchorElement> & {\n  owner: string;\n  repo: string;\n  token?: string;\n}) {\n  const { stars } = await getRepoStarsAndForks(owner, repo, token);\n  const humanizedStars = humanizeNumber(stars);\n\n  return (\n    <a\n      href={`https://github.com/${owner}/${repo}`}\n      rel=\"noreferrer noopener\"\n      target=\"_blank\"\n      {...props}\n      className={cn(\n        'flex flex-col gap-1.5 p-2 rounded-lg text-sm text-fd-foreground/80 transition-colors lg:flex-row lg:items-center hover:text-fd-accent-foreground hover:bg-fd-accent',\n        props.className,\n      )}\n    >\n      <p className=\"flex items-center gap-2 truncate\">\n        <svg fill=\"currentColor\" viewBox=\"0 0 24 24\" className=\"size-3.5\">\n          <title>GitHub</title>\n          <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n        </svg>\n        {owner}/{repo}\n      </p>\n      <p className=\"flex text-xs items-center gap-1 text-fd-muted-foreground\">\n        <Star className=\"size-3\" />\n        {humanizedStars}\n      </p>\n    </a>\n  );\n}\n\n/**\n * Converts a number to a human-readable string with K suffix for thousands\n * @example 1500 -> \"1.5K\", 1000000 -> \"1000000\"\n */\nfunction humanizeNumber(num: number): string {\n  if (num < 1000) {\n    return num.toString();\n  }\n\n  if (num < 100000) {\n    // For numbers between 1,000 and 99,999, show with one decimal (e.g., 1.5K)\n    const value = (num / 1000).toFixed(1);\n    // Remove trailing .0 if present\n    const formattedValue = value.endsWith('.0') ? value.slice(0, -2) : value;\n\n    return `${formattedValue}K`;\n  }\n\n  if (num < 1000000) {\n    // For numbers between 10,000 and 999,999, show as whole K (e.g., 10K, 999K)\n    return `${Math.floor(num / 1000)}K`;\n  }\n\n  // For 1,000,000 and above, just return the number\n  return num.toString();\n}\n",
      "path": "components:github-info.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    }
  ],
  "subComponents": [],
  "dependencies": {
    "lucide-react": "",
    "react": "",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {}
}
