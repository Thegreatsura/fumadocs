{
  "name": "heading",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "import { Link } from 'lucide-react';\nimport type { ComponentPropsWithoutRef } from 'react';\nimport { cn } from '@/utils/cn';\n\ntype Types = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\ntype HeadingProps<T extends Types> = Omit<ComponentPropsWithoutRef<T>, 'as'> & {\n  as?: T;\n};\n\nexport function Heading<T extends Types = 'h1'>({\n  as,\n  className,\n  ...props\n}: HeadingProps<T>): React.ReactElement {\n  const As = as ?? 'h1';\n\n  if (!props.id) return <As className={className} {...props} />;\n\n  return (\n    <As\n      className={cn('flex scroll-m-28 flex-row items-center gap-2', className)}\n      {...props}\n    >\n      <a data-card=\"\" href={`#${props.id}`} className=\"peer\">\n        {props.children}\n      </a>\n      <Link\n        aria-label=\"Link to section\"\n        className=\"size-3.5 shrink-0 text-fd-muted-foreground opacity-0 transition-opacity peer-hover:opacity-100\"\n      />\n    </As>\n  );\n}\n",
      "path": "components:heading.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    }
  ],
  "subComponents": [],
  "dependencies": {
    "lucide-react": "",
    "react": "",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {}
}
