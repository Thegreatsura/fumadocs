{
  "name": "type-table",
  "files": [
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts",
        "@/components/ui/popover": "components:ui/popover.tsx"
      },
      "content": "'use client';\n\nimport { Info as InfoIcon, Link as LinkIcon } from 'lucide-react';\nimport Link from 'fumadocs-core/link';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '@/utils/cn';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport type { ReactNode } from 'react';\n\nexport function Info({ children }: { children: ReactNode }): ReactNode {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <InfoIcon className=\"size-4\" />\n      </PopoverTrigger>\n      <PopoverContent className=\"prose max-h-[400px] min-w-[220px] max-w-[400px] overflow-auto text-sm prose-no-margin\">\n        {children}\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ninterface ObjectType {\n  /**\n   * Additional description of the field\n   */\n  description?: ReactNode;\n  type: string;\n  typeDescription?: ReactNode;\n  /**\n   * Optional link to the type\n   */\n  typeDescriptionLink?: string;\n  default?: string;\n\n  required?: boolean;\n  deprecated?: boolean;\n}\n\nconst field = cva('inline-flex flex-row items-center gap-1');\nconst code = cva(\n  'rounded-md bg-fd-secondary p-1 text-fd-secondary-foreground',\n  {\n    variants: {\n      color: {\n        primary: 'bg-fd-primary/10 text-fd-primary',\n        deprecated: 'line-through text-fd-primary/50',\n      },\n    },\n  },\n);\n\nexport function TypeTable({ type }: { type: Record<string, ObjectType> }) {\n  return (\n    <div className=\"prose my-6 overflow-auto prose-no-margin\">\n      <table className=\"whitespace-nowrap text-sm text-fd-muted-foreground\">\n        <thead>\n          <tr>\n            <th className=\"w-[45%]\">Prop</th>\n            <th className=\"w-[30%]\">Type</th>\n            <th className=\"w-1/4\">Default</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(type).map(([key, value]) => (\n            <tr key={key}>\n              <td>\n                <div className={field()}>\n                  <code\n                    className={cn(\n                      code({\n                        color: value.deprecated ? 'deprecated' : 'primary',\n                      }),\n                    )}\n                  >\n                    {key}\n                    {!value.required && '?'}\n                  </code>\n                  {value.description ? <Info>{value.description}</Info> : null}\n                </div>\n              </td>\n              <td>\n                <div className={field()}>\n                  <code className={code()}>{value.type}</code>\n                  {value.typeDescription ? (\n                    <Info>{value.typeDescription}</Info>\n                  ) : null}\n                  {value.typeDescriptionLink ? (\n                    <Link href={value.typeDescriptionLink}>\n                      <LinkIcon className=\"size-4 text-fd-muted-foreground\" />\n                    </Link>\n                  ) : null}\n                </div>\n              </td>\n              <td>\n                {value.default ? (\n                  <code className={code()}>{value.default}</code>\n                ) : (\n                  '-'\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n",
      "path": "components:type-table.tsx"
    },
    {
      "imports": {},
      "content": "export { twMerge as cn } from 'tailwind-merge';\n",
      "path": "lib:cn.ts"
    },
    {
      "imports": {
        "@/utils/cn": "lib:cn.ts"
      },
      "content": "'use client';\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\nimport * as React from 'react';\nimport { cn } from '@/utils/cn';\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverContent = React.forwardRef<\n  React.ComponentRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      side=\"bottom\"\n      className={cn(\n        'z-50 origin-(--radix-popover-content-transform-origin) min-w-[240px] max-w-[98vw] rounded-xl border bg-fd-popover/60 backdrop-blur-lg p-2 text-sm text-fd-popover-foreground shadow-lg focus-visible:outline-none data-[state=closed]:animate-fd-popover-out data-[state=open]:animate-fd-popover-in',\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nconst PopoverClose = PopoverPrimitive.PopoverClose;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverClose };\n",
      "path": "components:ui/popover.tsx"
    }
  ],
  "subComponents": [],
  "dependencies": {
    "lucide-react": "",
    "fumadocs-core": "",
    "class-variance-authority": "^0.7.1",
    "react": "",
    "tailwind-merge": "^3.3.1",
    "@radix-ui/react-popover": "^1.1.14"
  },
  "devDependencies": {}
}
